{
	"info": {
		"_postman_id": "3ddd477f-5576-46e4-962b-853efbd67990",
		"name": "Wallet Pro Admin",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Gas Station Controller",
			"item": [
				{
					"name": "Positive TC",
					"item": [
						{
							"name": "Update per rnetwork gas station configuration | ERC20",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"const response = pm.response.json();\r",
											"if(pm.response.status == \"OK\"){\r",
											"\r",
											"                //GeneralTests\r",
											"                const response = pm.response.json()\r",
											"                var gasThreshold = pm.collectionVariables.get(\"gasThreshold\");\r",
											"                var gasCap = pm.collectionVariables.get(\"gasCap\");\r",
											"                var maxGasPrice = pm.collectionVariables.get(\"maxGasPrice\");\r",
											"\r",
											"                pm.test(\"Check if gasThreshold value is correct\", ()=>{\r",
											"                    pm.expect(response.gasThreshold).equal(gasThreshold)\r",
											"                })\r",
											"                pm.test(\"Check if gasCap value is correct\", ()=>{\r",
											"                    pm.expect(response.gasCap).equal(gasCap)\r",
											"                })\r",
											"                pm.test(\"Check if maxGasPrice value is correct\", ()=>{\r",
											"                    pm.expect(response.maxGasPrice).equal(maxGasPrice)\r",
											"                })\r",
											"\r",
											"                //KeysTests\r",
											"                pm.test(\"Check key of param named gasThreshold\", ()=>{\r",
											"                    pm.expect(Object.keys(response)[0]).equal(\"gasThreshold\")\r",
											"                })\r",
											"                pm.test(\"Check key of param named gasCap\", ()=>{\r",
											"                    pm.expect(Object.keys(response)[1]).equal(\"gasCap\")\r",
											"                })\r",
											"                pm.test(\"Check key of param named maxGasPrice\", ()=>{\r",
											"                    pm.expect(Object.keys(response)[2]).equal(\"maxGasPrice\")\r",
											"                })\r",
											"}\r",
											"else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50ea4a2-d538-4dee-9db2-9872941514c6",
										"exec": [
											"var gasThresholdValues = [\"0.002\", \"0.0021\", \"0.0022\", \"0.003\", \"0.0031\"];\r",
											"\r",
											"var gasCapValues = [\"0.10\", \"0.12\", \"0.13\", \"0.14\", \"0.141\"];\r",
											"\r",
											"var maxGasPriceValues = [\"0.003\", \"0.0031\", \"0.0032\", \"0.0032\", \"0.002\"];\r",
											"\r",
											"\r",
											"\r",
											"const RandomgasThreshold = Math.floor(Math.random() * gasThresholdValues.length);\r",
											"pm.collectionVariables.set(\"gasThreshold\", gasThresholdValues[RandomgasThreshold]);\r",
											"\r",
											"const RandomgasCap = Math.floor(Math.random() * gasCapValues.length);\r",
											"pm.collectionVariables.set(\"gasCap\", gasCapValues[RandomgasCap]);\r",
											"\r",
											"const RandommaxGasPrice = Math.floor(Math.random() * maxGasPriceValues.length);\r",
											"pm.collectionVariables.set(\"maxGasPrice\", maxGasPriceValues[RandommaxGasPrice]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "e6623f7c-af04-4100-9c7c-1ee3828d5cc8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": {{gasThreshold}},\r\n  \"gasCap\": {{gasCap}},\r\n  \"maxGasPrice\": {{maxGasPrice}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/gas-station/:network/configuration",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"gas-station",
										":network",
										"configuration"
									],
									"variable": [
										{
											"id": "802b10dd-28ed-4dac-b359-5e5b2edf6a69",
											"key": "network",
											"value": "ERC20",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Gas station configuration with network | ERC20",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"const response = pm.response.json();\r",
											"if(pm.response.status == \"OK\"){\r",
											"\r",
											"                //GeneralTests\r",
											"                const response = pm.response.json()\r",
											"                var gasThreshold = pm.collectionVariables.get(\"gasThreshold\");\r",
											"                var gasCap = pm.collectionVariables.get(\"gasCap\");\r",
											"                var maxGasPrice = pm.collectionVariables.get(\"maxGasPrice\");\r",
											"\r",
											"                pm.test(\"Check if gasThreshold value is correct\", ()=>{\r",
											"                    pm.expect(response.gasThreshold).equal(gasThreshold)\r",
											"                })\r",
											"                pm.test(\"Check if gasCap value is correct\", ()=>{\r",
											"                    pm.expect(response.gasCap).equal(gasCap)\r",
											"                })\r",
											"                pm.test(\"Check if maxGasPrice value is correct\", ()=>{\r",
											"                    pm.expect(response.maxGasPrice).equal(maxGasPrice)\r",
											"                })\r",
											"\r",
											"                //KeysTests\r",
											"                pm.test(\"Check key of param named gasThreshold\", ()=>{\r",
											"                    pm.expect(Object.keys(response)[0]).equal(\"gasThreshold\")\r",
											"                })\r",
											"                pm.test(\"Check key of param named gasCap\", ()=>{\r",
											"                    pm.expect(Object.keys(response)[1]).equal(\"gasCap\")\r",
											"                })\r",
											"                pm.test(\"Check key of param named maxGasPrice\", ()=>{\r",
											"                    pm.expect(Object.keys(response)[2]).equal(\"maxGasPrice\")\r",
											"                })\r",
											"}\r",
											"else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "59c641d4-eaea-4d3f-b862-810567961d1d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "c056b009-1c66-444b-81e3-bcf5cb97f0ba",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/gas-station/:network/configuration",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"gas-station",
										":network",
										"configuration"
									],
									"variable": [
										{
											"key": "network",
											"value": "ERC20",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update general gas station configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"const response = pm.response.json();\r",
											"if(pm.response.status == \"OK\"){\r",
											"\r",
											"                //GeneralTests\r",
											"                const response = pm.response.json()\r",
											"                var gasThreshold = pm.collectionVariables.get(\"gasThreshold\");\r",
											"                var gasCap = pm.collectionVariables.get(\"gasCap\");\r",
											"                var maxGasPrice = pm.collectionVariables.get(\"maxGasPrice\");\r",
											"\r",
											"                pm.test(\"Check if gasThreshold value is correct\", ()=>{\r",
											"                    pm.expect(response.gasThreshold).equal(gasThreshold)\r",
											"                })\r",
											"                pm.test(\"Check if gasCap value is correct\", ()=>{\r",
											"                    pm.expect(response.gasCap).equal(gasCap)\r",
											"                })\r",
											"                pm.test(\"Check if maxGasPrice value is correct\", ()=>{\r",
											"                    pm.expect(response.maxGasPrice).equal(maxGasPrice)\r",
											"                })\r",
											"\r",
											"                //KeysTests\r",
											"                pm.test(\"Check key of param named gasThreshold\", ()=>{\r",
											"                    pm.expect(Object.keys(response)[0]).equal(\"gasThreshold\")\r",
											"                })\r",
											"                pm.test(\"Check key of param named gasCap\", ()=>{\r",
											"                    pm.expect(Object.keys(response)[1]).equal(\"gasCap\")\r",
											"                })\r",
											"                pm.test(\"Check key of param named maxGasPrice\", ()=>{\r",
											"                    pm.expect(Object.keys(response)[2]).equal(\"maxGasPrice\")\r",
											"                })\r",
											"}\r",
											"else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "11057a31-d15a-4980-9cf1-bc7a346dc163",
										"exec": [
											"var gasThresholdValues = [\"0.002\", \"0.0021\", \"0.0022\", \"0.003\", \"0.0031\"];\r",
											"\r",
											"var gasCapValues = [\"0.10\", \"0.12\", \"0.13\", \"0.14\", \"0.141\"];\r",
											"\r",
											"var maxGasPriceValues = [\"0.003\", \"0.0031\", \"0.0032\", \"0.0032\", \"0.002\"];\r",
											"\r",
											"\r",
											"\r",
											"const RandomgasThreshold = Math.floor(Math.random() * gasThresholdValues.length);\r",
											"console.log(RandomgasThreshold)\r",
											"pm.collectionVariables.set(\"gasThreshold\", gasThresholdValues[RandomgasThreshold]);\r",
											"\r",
											"const RandomgasCap = Math.floor(Math.random() * gasCapValues.length);\r",
											"console.log(RandomgasCap)\r",
											"pm.collectionVariables.set(\"gasCap\", gasCapValues[RandomgasCap]);\r",
											"\r",
											"const RandommaxGasPrice = Math.floor(Math.random() * maxGasPriceValues.length);\r",
											"console.log(RandommaxGasPrice)\r",
											"pm.collectionVariables.set(\"maxGasPrice\", maxGasPriceValues[RandommaxGasPrice]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "75fdef8f-3d76-476c-9bf4-109e57f19bed",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": {{gasThreshold}},\r\n  \"gasCap\": {{gasCap}},\r\n  \"maxGasPrice\": {{maxGasPrice}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/gas-station/configuration"
							},
							"response": []
						},
						{
							"name": "Get Gas station configuration general",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"const response = pm.response.json();\r",
											"if(pm.response.status == \"OK\"){\r",
											"\r",
											"                //GeneralTests\r",
											"                const response = pm.response.json()\r",
											"                var gasThreshold = pm.collectionVariables.get(\"gasThreshold\");\r",
											"                var gasCap = pm.collectionVariables.get(\"gasCap\");\r",
											"                var maxGasPrice = pm.collectionVariables.get(\"maxGasPrice\");\r",
											"\r",
											"                pm.test(\"Check if gasThreshold value is correct\", ()=>{\r",
											"                    pm.expect(response.gasThreshold).equal(gasThreshold)\r",
											"                })\r",
											"                pm.test(\"Check if gasCap value is correct\", ()=>{\r",
											"                    pm.expect(response.gasCap).equal(gasCap)\r",
											"                })\r",
											"                pm.test(\"Check if maxGasPrice value is correct\", ()=>{\r",
											"                    pm.expect(response.maxGasPrice).equal(maxGasPrice)\r",
											"                })\r",
											"\r",
											"                //KeysTests\r",
											"                pm.test(\"Check key of param named gasThreshold\", ()=>{\r",
											"                    pm.expect(Object.keys(response)[0]).equal(\"gasThreshold\")\r",
											"                })\r",
											"                pm.test(\"Check key of param named gasCap\", ()=>{\r",
											"                    pm.expect(Object.keys(response)[1]).equal(\"gasCap\")\r",
											"                })\r",
											"                pm.test(\"Check key of param named maxGasPrice\", ()=>{\r",
											"                    pm.expect(Object.keys(response)[2]).equal(\"maxGasPrice\")\r",
											"                })\r",
											"}\r",
											"else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "224adab2-b46e-4933-890b-694e294259f6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{Admin_URL}}/gas-station/configuration"
							},
							"response": []
						},
						{
							"name": "Get supported networks",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "57b91473-d128-426f-935c-465167443b94",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{Admin_URL}}/gas-station/networks"
							},
							"response": []
						},
						{
							"name": "Update per network gas station configuration | valid gasThreshold | as string",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"const response = pm.response.json();\r",
											"if(pm.response.status == \"OK\"){\r",
											"\r",
											"                //GeneralTests\r",
											"                const response = pm.response.json()\r",
											"                var gasThreshold = pm.collectionVariables.get(\"gasThreshold\");\r",
											"                var gasCap = pm.collectionVariables.get(\"gasCap\");\r",
											"                var maxGasPrice = pm.collectionVariables.get(\"maxGasPrice\");\r",
											"\r",
											"                pm.test(\"Check if gasThreshold value is correct\", ()=>{\r",
											"                    pm.expect(response.gasThreshold).equal(gasThreshold)\r",
											"                })\r",
											"                pm.test(\"Check if gasCap value is correct\", ()=>{\r",
											"                    pm.expect(response.gasCap).equal(gasCap)\r",
											"                })\r",
											"                pm.test(\"Check if maxGasPrice value is correct\", ()=>{\r",
											"                    pm.expect(response.maxGasPrice).equal(maxGasPrice)\r",
											"                })\r",
											"\r",
											"                //KeysTests\r",
											"                pm.test(\"Check key of param named gasThreshold\", ()=>{\r",
											"                    pm.expect(Object.keys(response)[0]).equal(\"gasThreshold\")\r",
											"                })\r",
											"                pm.test(\"Check key of param named gasCap\", ()=>{\r",
											"                    pm.expect(Object.keys(response)[1]).equal(\"gasCap\")\r",
											"                })\r",
											"                pm.test(\"Check key of param named maxGasPrice\", ()=>{\r",
											"                    pm.expect(Object.keys(response)[2]).equal(\"maxGasPrice\")\r",
											"                })\r",
											"}\r",
											"else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50ea4a2-d538-4dee-9db2-9872941514c6",
										"exec": [
											"var gasThresholdValues = [\"0.002\", \"0.0021\", \"0.0022\", \"0.003\", \"0.0031\"];\r",
											"\r",
											"var gasCapValues = [\"0.10\", \"0.12\", \"0.13\", \"0.14\", \"0.141\"];\r",
											"\r",
											"var maxGasPriceValues = [\"0.003\", \"0.0031\", \"0.0032\", \"0.0032\", \"0.002\"];\r",
											"\r",
											"\r",
											"\r",
											"const RandomgasThreshold = Math.floor(Math.random() * gasThresholdValues.length);\r",
											"pm.collectionVariables.set(\"gasThreshold\", gasThresholdValues[RandomgasThreshold]);\r",
											"\r",
											"const RandomgasCap = Math.floor(Math.random() * gasCapValues.length);\r",
											"pm.collectionVariables.set(\"gasCap\", gasCapValues[RandomgasCap]);\r",
											"\r",
											"const RandommaxGasPrice = Math.floor(Math.random() * maxGasPriceValues.length);\r",
											"pm.collectionVariables.set(\"maxGasPrice\", maxGasPriceValues[RandommaxGasPrice]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "27cada7b-a511-43f6-837c-e63b2839891d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": \"{{gasThreshold}}\",\r\n  \"gasCap\": \"{{gasCap}}\",\r\n  \"maxGasPrice\": \"{{maxGasPrice}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/gas-station/:network/configuration",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"gas-station",
										":network",
										"configuration"
									],
									"variable": [
										{
											"id": "802b10dd-28ed-4dac-b359-5e5b2edf6a69",
											"key": "network",
											"value": "ERC20",
											"type": "string"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_id": "a7cb856e-94fd-401a-9f52-94bb99954560",
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative TC",
					"item": [
						{
							"name": "Get Gas station configuration with network | Unsupported network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 500 Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be Gas station not available for currency\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Gas station not available for given network\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "c8494063-282e-4b7f-b2e4-a3d41eb2edaa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/gas-station/:network/configuration",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"gas-station",
										":network",
										"configuration"
									],
									"variable": [
										{
											"key": "network",
											"value": "SOLANA",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Gas station configuration with network | Lowercase network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d494d6f4-c0a8-48c4-ace8-217835391b12",
										"exec": [
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "ab4c4fd7-6306-4d20-b6b4-49a4c675be68",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/gas-station/:netowrk/configuration",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"gas-station",
										":netowrk",
										"configuration"
									],
									"variable": [
										{
											"key": "netowrk",
											"value": "erc20",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Gas station configuration with network | Mixedcase network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d494d6f4-c0a8-48c4-ace8-217835391b12",
										"exec": [
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "3f224917-b5e5-49a3-9519-40f3ff4eddca",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/gas-station/:netowrk/configuration",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"gas-station",
										":netowrk",
										"configuration"
									],
									"variable": [
										{
											"key": "netowrk",
											"value": "ErC20",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Gas station configuration with network | Doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d494d6f4-c0a8-48c4-ace8-217835391b12",
										"exec": [
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "31fc292c-7da9-4742-9961-ae550a05d946",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/gas-station/:netowrk/configuration",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"gas-station",
										":netowrk",
										"configuration"
									],
									"variable": [
										{
											"key": "netowrk",
											"value": "TESt_NETWORK",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Gas station configuration with network | Empty network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d494d6f4-c0a8-48c4-ace8-217835391b12",
										"exec": [
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "e4d6b945-76f9-492a-bb4d-e2116ae541a0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/gas-station/:netowrk/configuration",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"gas-station",
										":netowrk",
										"configuration"
									],
									"variable": [
										{
											"key": "netowrk",
											"value": "",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update per network gas station configuration | Imvalid gasThreshold | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be Parameters should be of number format\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Parameters should be of number format\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50ea4a2-d538-4dee-9db2-9872941514c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "0e5e44e5-46c5-4e44-851a-7469a55c20ed",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": \"12x\",\r\n  \"gasCap\": {{gasCap}},\r\n  \"maxGasPrice\": {{maxGasPrice}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/gas-station/:network/configuration",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"gas-station",
										":network",
										"configuration"
									],
									"variable": [
										{
											"id": "802b10dd-28ed-4dac-b359-5e5b2edf6a69",
											"key": "network",
											"value": "ERC20",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update per network gas station configuration | Empty gasThreshold",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be Parameters should be of number format\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Parameters should be of number format\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50ea4a2-d538-4dee-9db2-9872941514c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "0ead9bae-a29b-4aed-943f-e6d23ba6a700",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": \"\",\r\n  \"gasCap\": {{gasCap}},\r\n  \"maxGasPrice\": {{maxGasPrice}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/gas-station/:network/configuration",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"gas-station",
										":network",
										"configuration"
									],
									"variable": [
										{
											"id": "802b10dd-28ed-4dac-b359-5e5b2edf6a69",
											"key": "network",
											"value": "ERC20",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update per network gas station configuration | Empty gasCap",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be Parameters should be of number format\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Parameters should be of number format\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50ea4a2-d538-4dee-9db2-9872941514c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "17784057-66a0-4711-8373-1d8539d5a8ed",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": {{gasThreshold}},\r\n  \"gasCap\": \"\",\r\n  \"maxGasPrice\": {{maxGasPrice}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/gas-station/:network/configuration",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"gas-station",
										":network",
										"configuration"
									],
									"variable": [
										{
											"id": "802b10dd-28ed-4dac-b359-5e5b2edf6a69",
											"key": "network",
											"value": "ERC20",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update per network gas station configuration | Invalid gasCap | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be Parameters should be of number format\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Parameters should be of number format\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50ea4a2-d538-4dee-9db2-9872941514c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "f52bf68a-4000-4f36-a634-15645aab777a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": {{gasThreshold}},\r\n  \"gasCap\": \"12as\",\r\n  \"maxGasPrice\": {{maxGasPrice}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/gas-station/:network/configuration",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"gas-station",
										":network",
										"configuration"
									],
									"variable": [
										{
											"id": "802b10dd-28ed-4dac-b359-5e5b2edf6a69",
											"key": "network",
											"value": "ERC20",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update per network gas station configuration | Invalid maxGasPrice | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be Parameters should be of number format\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Parameters should be of number format\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50ea4a2-d538-4dee-9db2-9872941514c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "6a64a7a6-2c4b-4dba-b0a2-83b0cb2834c5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": {{gasThreshold}},\r\n  \"gasCap\": {{gasCap}},\r\n  \"maxGasPrice\": \"sa\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/gas-station/:network/configuration",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"gas-station",
										":network",
										"configuration"
									],
									"variable": [
										{
											"id": "802b10dd-28ed-4dac-b359-5e5b2edf6a69",
											"key": "network",
											"value": "ERC20",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update per network gas station configuration | Empty maxGasPrice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be Parameters should be of number format\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Parameters should be of number format\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50ea4a2-d538-4dee-9db2-9872941514c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "28b072b1-89ac-4cef-ad26-34201cee8d6e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": {{gasThreshold}},\r\n  \"gasCap\": {{gasCap}},\r\n  \"maxGasPrice\": \"s\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/gas-station/:network/configuration",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"gas-station",
										":network",
										"configuration"
									],
									"variable": [
										{
											"id": "802b10dd-28ed-4dac-b359-5e5b2edf6a69",
											"key": "network",
											"value": "ERC20",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update general gas station configuration | Imvalid gasThreshold | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be Parameters should be of number format\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Parameters should be of number format\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50ea4a2-d538-4dee-9db2-9872941514c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "7e0f0589-a225-4623-89fe-aa779258d82c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": \"12x\",\r\n  \"gasCap\": {{gasCap}},\r\n  \"maxGasPrice\": {{maxGasPrice}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/gas-station/configuration"
							},
							"response": []
						},
						{
							"name": "Update general gas station configuration | Empty gasThreshold",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be Parameters should be of number format\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Parameters should be of number format\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50ea4a2-d538-4dee-9db2-9872941514c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "985e5fca-574a-47b9-b25e-0372659b1776",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": \"\",\r\n  \"gasCap\": {{gasCap}},\r\n  \"maxGasPrice\": {{maxGasPrice}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/gas-station/configuration"
							},
							"response": []
						},
						{
							"name": "Update general gas station configuration | Empty gasCap",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be Parameters should be of number format\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Parameters should be of number format\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50ea4a2-d538-4dee-9db2-9872941514c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "2412cc92-61ef-4fa3-91ce-0002048220ab",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": {{gasThreshold}},\r\n  \"gasCap\": \"\",\r\n  \"maxGasPrice\": {{maxGasPrice}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/gas-station/configuration"
							},
							"response": []
						},
						{
							"name": "Update general gas station configuration | Invalid gasCap | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be Parameters should be of number format\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Parameters should be of number format\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50ea4a2-d538-4dee-9db2-9872941514c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "bc77a571-153e-405d-a0e2-e4897dbaa9aa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": {{gasThreshold}},\r\n  \"gasCap\": \"12as\",\r\n  \"maxGasPrice\": {{maxGasPrice}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/gas-station/configuration"
							},
							"response": []
						},
						{
							"name": "Update general gas station configuration | Invalid maxGasPrice | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be Parameters should be of number format\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Parameters should be of number format\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50ea4a2-d538-4dee-9db2-9872941514c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "8c49d601-d6a1-4050-b71b-43d9dc818a6a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": {{gasThreshold}},\r\n  \"gasCap\": {{gasCap}},\r\n  \"maxGasPrice\": \"sa\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/gas-station/configuration"
							},
							"response": []
						},
						{
							"name": "Update general gas station configuration | Empty maxGasPrice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be Parameters should be of number format\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Parameters should be of number format\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50ea4a2-d538-4dee-9db2-9872941514c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "ede991e0-572c-4631-9b19-47482331fbe6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": {{gasThreshold}},\r\n  \"gasCap\": {{gasCap}},\r\n  \"maxGasPrice\": \"s\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/gas-station/configuration"
							},
							"response": []
						},
						{
							"name": "Update per network gas station configuration | GasCap is less than gasThreshold",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be Gas threshold must be lower than gasCap\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Gas threshold must be lower than gasCap\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50ea4a2-d538-4dee-9db2-9872941514c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "32bd4089-6bee-41f9-af86-8147322d3d4a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": 0.1,\r\n  \"gasCap\": 0.001,\r\n  \"maxGasPrice\": {{maxGasPrice}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/gas-station/:network/configuration",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"gas-station",
										":network",
										"configuration"
									],
									"variable": [
										{
											"id": "802b10dd-28ed-4dac-b359-5e5b2edf6a69",
											"key": "network",
											"value": "ERC20",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update per network gas station configuration | Invalid network | Unsupported",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 500 Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be Gas station not available for given network\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Gas station not available for given network\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50ea4a2-d538-4dee-9db2-9872941514c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "03123f8e-24df-4906-a143-ddaff298e879",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": 0.1,\r\n  \"gasCap\": 0.2,\r\n  \"maxGasPrice\": {{maxGasPrice}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/gas-station/:network/configuration",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"gas-station",
										":network",
										"configuration"
									],
									"variable": [
										{
											"key": "network",
											"value": "TRC20",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update per network gas station configuration | Invalid network |  Doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50ea4a2-d538-4dee-9db2-9872941514c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "cc8da074-e469-4c05-b7e4-d4cc554f9123",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": 0.1,\r\n  \"gasCap\": 0.2,\r\n  \"maxGasPrice\": {{maxGasPrice}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/gas-station/:network/configuration",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"gas-station",
										":network",
										"configuration"
									],
									"variable": [
										{
											"key": "network",
											"value": "Test_network",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update per network gas station configuration | Invalid network |  Mixedcase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50ea4a2-d538-4dee-9db2-9872941514c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "bf00390b-3a6d-4e4f-ac00-6c93306ffd51",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": 0.1,\r\n  \"gasCap\": 0.2,\r\n  \"maxGasPrice\": {{maxGasPrice}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/gas-station/:network/configuration",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"gas-station",
										":network",
										"configuration"
									],
									"variable": [
										{
											"key": "network",
											"value": "BeP20",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update per network gas station configuration | Invalid network |  lOWECASE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4af0dd25-69d8-426a-b300-576595604d0c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50ea4a2-d538-4dee-9db2-9872941514c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "5dcea2f9-3e50-4bc8-8633-6794e426780d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"gasThreshold\": 0.1,\r\n  \"gasCap\": 0.2,\r\n  \"maxGasPrice\": {{maxGasPrice}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/gas-station/:network/configuration",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"gas-station",
										":network",
										"configuration"
									],
									"variable": [
										{
											"key": "network",
											"value": "erc20",
											"type": "string"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_id": "b0bbd5eb-9005-499f-889a-8a078a1795d4",
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Gas station configuration with network | empty network | Not ready for release",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4af0dd25-69d8-426a-b300-576595604d0c",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d494d6f4-c0a8-48c4-ace8-217835391b12",
								"exec": [
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "74d79165-716e-40ef-bed0-1e6a73717f59",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Admin_URL}}/gas-station/:netowrk/configuration",
							"host": [
								"{{Admin_URL}}"
							],
							"path": [
								"gas-station",
								":netowrk",
								"configuration"
							],
							"variable": [
								{
									"key": "netowrk",
									"value": "",
									"type": "string"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "d00aaf18-d64e-4df5-85d4-ea54a14cafaa"
		},
		{
			"name": "Limit controller",
			"item": [
				{
					"name": "Positive TC",
					"item": [
						{
							"name": "Get all limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"var response = pm.response.json();\r",
											"const pass = () => {}\r",
											"if(pm.response.status == \"OK\"){\r",
											"   if(response.length != 0){\r",
											"       for(var  i = 0; i < response.length ; i++){\r",
											"        if(response[i].allowedMethods.length != 0){\r",
											"            //KeysTests\r",
											"            pm.test(\"Object \" + i +\" Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response[i])[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object \" + i +\" Check key of param named name\", ()=>{\r",
											"                pm.expect(Object.keys(response[i])[1]).equal(\"name\")\r",
											"            })\r",
											"            pm.test(\"Object \" + i +\" Check key of param named allowedMethods\", ()=>{\r",
											"                pm.expect(Object.keys(response[i])[2]).equal(\"allowedMethods\")\r",
											"            })\r",
											"            pm.test(\"Object \" + i +\" Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response[i].allowedMethods[0])[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object \" + i +\" Check key of param named currency\", ()=>{\r",
											"                pm.expect(Object.keys(response[i].allowedMethods[0])[1]).equal(\"currency\")\r",
											"            })\r",
											"            pm.test(\"Object \" + i +\" Check key of param named allowTransfer\", ()=>{\r",
											"                pm.expect(Object.keys(response[i].allowedMethods[0])[2]).equal(\"allowTransfer\")\r",
											"            })\r",
											"            pm.test(\"Object \" + i +\" Check key of param named currencyAllowedMethods\", ()=>{\r",
											"                pm.expect(Object.keys(response[i].allowedMethods[0])[3]).equal(\"currencyAllowedMethods\")\r",
											"            })\r",
											"            pm.test(\"Object \" + i +\" Check key of param named sendNetworks\", ()=>{\r",
											"                pm.expect(Object.keys(response[i].allowedMethods[0].currencyAllowedMethods)[0]).equal(\"sendNetworks\")\r",
											"            })\r",
											"            pm.test(\"Object \" + i +\" Check key of param named receiveNetworks\", ()=>{\r",
											"                pm.expect(Object.keys(response[i].allowedMethods[0].currencyAllowedMethods)[1]).equal(\"receiveNetworks\")\r",
											"            })\r",
											"            pm.test(\"Object \" + i +\" Check key of param named sendNetworks -- netowrk\", ()=>{\r",
											"                pm.expect(Object.keys(response[i].allowedMethods[0].currencyAllowedMethods.sendNetworks[0])[0]).equal(\"network\")\r",
											"            })\r",
											"            pm.test(\"Object \" + i +\" Check key of param named sendNetworks -- hidden\", ()=>{\r",
											"                pm.expect(Object.keys(response[i].allowedMethods[0].currencyAllowedMethods.sendNetworks[0])[1]).equal(\"hidden\")\r",
											"            })\r",
											"            pm.test(\"Object \" + i +\" Check key of param named receiveNetworks -- netowrk\", ()=>{\r",
											"                pm.expect(Object.keys(response[i].allowedMethods[0].currencyAllowedMethods.receiveNetworks[0])[0]).equal(\"network\")\r",
											"            })\r",
											"            pm.test(\"Object \" + i +\" Check key of param named receiveNetworks -- hidden\", ()=>{\r",
											"                pm.expect(Object.keys(response[i].allowedMethods[0].currencyAllowedMethods.receiveNetworks[0])[1]).equal(\"hidden\")\r",
											"            })\r",
											"    }else{\r",
											"        pass();\r",
											"    }   \r",
											"        }\r",
											"\r",
											"   }\r",
											"   else{\r",
											"   pm.test.skip(\"You don't have auto exchange configuration in your account\")\r",
											"}\r",
											"}else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"    }\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "6e3ca834-c327-49b5-85ce-1634663382d4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{Admin_URL}}/limit/all"
							},
							"response": []
						},
						{
							"name": "Get limit by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"var response = pm.response.json();\r",
											"if(pm.response.status == \"OK\"){\r",
											"   if(response.length != 0){\r",
											"            //GeneralTests\r",
											"            pm.test(\"Check if id value is correct\", ()=>{\r",
											"                pm.expect(response.id).equal(1)\r",
											"            })\r",
											"            //KeysTests\r",
											"            pm.test(\"Object Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response)[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named name\", ()=>{\r",
											"                pm.expect(Object.keys(response)[1]).equal(\"name\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named allowedMethods\", ()=>{\r",
											"                pm.expect(Object.keys(response)[2]).equal(\"allowedMethods\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named currency\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[1]).equal(\"currency\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named allowTransfer\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[2]).equal(\"allowTransfer\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named currencyAllowedMethods\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[3]).equal(\"currencyAllowedMethods\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods)[0]).equal(\"sendNetworks\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods)[1]).equal(\"receiveNetworks\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks -- netowrk\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.sendNetworks[0])[0]).equal(\"network\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks -- hidden\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.sendNetworks[0])[1]).equal(\"hidden\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks -- netowrk\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.receiveNetworks[0])[0]).equal(\"network\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks -- hidden\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.receiveNetworks[0])[1]).equal(\"hidden\")\r",
											"            })\r",
											"    }   \r",
											"   else{\r",
											"   pm.test.skip(\"You don't have auto exchange configuration in your account\")\r",
											"}\r",
											"}else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"    }\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "d23447f4-d529-4024-a9b5-60589a1cf794",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/limit/:id",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create limit configuration | Global transfer false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"var response = pm.response.json();\r",
											"if(pm.response.status == \"OK\"){\r",
											"   if(response.length != 0){\r",
											"            pm.collectionVariables.set(\"ConfigID\", response.id);\r",
											"            var name = pm.collectionVariables.get(\"name\");\r",
											"            //GeneralTests\r",
											"            pm.test(\"Check if name value is correct\", ()=>{\r",
											"                pm.expect(response.name).equal(name)\r",
											"            })\r",
											"            pm.test(\"Check if currency value is correct\", ()=>{\r",
											"                pm.expect(response.allowedMethods[0].currency).equal(\"USDT\")\r",
											"            })\r",
											"            pm.test(\"Check if currency value is correct\", ()=>{\r",
											"                pm.expect(response.allowedMethods[0].allowTransfer).equal(false)\r",
											"            })\r",
											"            //KeysTests\r",
											"            pm.test(\"Object Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response)[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named name\", ()=>{\r",
											"                pm.expect(Object.keys(response)[1]).equal(\"name\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named allowedMethods\", ()=>{\r",
											"                pm.expect(Object.keys(response)[2]).equal(\"allowedMethods\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named currency\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[1]).equal(\"currency\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named allowTransfer\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[2]).equal(\"allowTransfer\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named currencyAllowedMethods\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[3]).equal(\"currencyAllowedMethods\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods)[0]).equal(\"sendNetworks\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods)[1]).equal(\"receiveNetworks\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks -- netowrk\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.sendNetworks[0])[0]).equal(\"network\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks -- hidden\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.sendNetworks[0])[1]).equal(\"hidden\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks -- netowrk\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.receiveNetworks[0])[0]).equal(\"network\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks -- hidden\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.receiveNetworks[0])[1]).equal(\"hidden\")\r",
											"            })\r",
											"    }   \r",
											"   else{\r",
											"   pm.test.skip(\"You don't have auto exchange configuration in your account\")\r",
											"}\r",
											"}else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"    }\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											"const characters ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"\r",
											"function generateString(length) {\r",
											"    let result = ' ';\r",
											"    const charactersLength = characters.length;\r",
											"    for ( let i = 0; i < length; i++ ) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"\r",
											"    return result;\r",
											"}\r",
											"var RandomWord = generateString(5);\r",
											"RandomGroupName = (\"Test\" + \"_Group\" + \"_id_\" +RandomWord).replaceAll(' ', \"\")\r",
											"console.log(RandomGroupName)\r",
											"\r",
											"pm.collectionVariables.set(\"name\", RandomGroupName);\r",
											"\r",
											"//---------------------------------------------------------------------------------------------------------------------------------------------------------------------\r",
											"\r",
											"const RandomNetworkForSendList = [\"ERC20\", \"BEP20\", \"POLYGON\", \"SOLANA\"]\r",
											"\r",
											"const RandomNetowrkForSend = Math.floor(Math.random() * RandomNetworkForSendList.length);\r",
											"pm.collectionVariables.set(\"SendNetwork\", RandomNetworkForSendList[RandomNetowrkForSend]);\r",
											"\r",
											"//---------------------------------------------------------------------------------------------------------------------------------------------------------------------\r",
											"\r",
											"const RandomNetworkForReceiveList = [\"ERC20\", \"BEP20\", \"POLYGON\", \"SOLANA\"]\r",
											"\r",
											"const RandomNetowrkForReceive = Math.floor(Math.random() * RandomNetworkForReceiveList.length);\r",
											"pm.collectionVariables.set(\"ReceiveNetwork\", RandomNetworkForReceiveList[RandomNetowrkForReceive]);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "04630f06-cbd7-46fc-91b8-452481f7765d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"allowedMethods\": [\r\n        {\r\n            \"currency\": \"USDT\",\r\n            \"allowTransfer\": false,\r\n            \"sendNetworks\": [\r\n                \"{{SendNetwork}}\", \"{{ReceiveNetwork}}\"\r\n            ],\r\n            \"receiveNetworks\": [\r\n                \"{{ReceiveNetwork}}\", \"{{SendNetwork}}\"\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/limit"
							},
							"response": []
						},
						{
							"name": "Delete currency allowed method configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "e18a9a77-5841-409e-8c7c-787b986b902d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{ConfigID}}",
											"type": "string"
										},
										{
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "faaef93c-8922-43f1-9692-094a1f19f7d5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{ConfigID}}",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create limit configuration | Global transfer true",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"var response = pm.response.json();\r",
											"if(pm.response.status == \"OK\"){\r",
											"   if(response.length != 0){\r",
											"            var name = pm.collectionVariables.get(\"name\");\r",
											"            pm.collectionVariables.set(\"ConfigID\", response.id);\r",
											"            //GeneralTests\r",
											"            pm.test(\"Check if name value is correct\", ()=>{\r",
											"                pm.expect(response.name).equal(name)\r",
											"            })\r",
											"            pm.test(\"Check if currency value is correct\", ()=>{\r",
											"                pm.expect(response.allowedMethods[0].currency).equal(\"USDT\")\r",
											"            })\r",
											"            pm.test(\"Check if currency value is correct\", ()=>{\r",
											"                pm.expect(response.allowedMethods[0].allowTransfer).equal(true)\r",
											"            })\r",
											"            //KeysTests\r",
											"            pm.test(\"Object Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response)[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named name\", ()=>{\r",
											"                pm.expect(Object.keys(response)[1]).equal(\"name\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named allowedMethods\", ()=>{\r",
											"                pm.expect(Object.keys(response)[2]).equal(\"allowedMethods\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named currency\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[1]).equal(\"currency\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named allowTransfer\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[2]).equal(\"allowTransfer\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named currencyAllowedMethods\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[3]).equal(\"currencyAllowedMethods\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods)[0]).equal(\"sendNetworks\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods)[1]).equal(\"receiveNetworks\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks -- netowrk\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.sendNetworks[0])[0]).equal(\"network\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks -- hidden\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.sendNetworks[0])[1]).equal(\"hidden\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks -- netowrk\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.receiveNetworks[0])[0]).equal(\"network\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks -- hidden\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.receiveNetworks[0])[1]).equal(\"hidden\")\r",
											"            })\r",
											"    }   \r",
											"   else{\r",
											"   pm.test.skip(\"You don't have auto exchange configuration in your account\")\r",
											"}\r",
											"}else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"    }\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											"const characters ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"\r",
											"function generateString(length) {\r",
											"    let result = ' ';\r",
											"    const charactersLength = characters.length;\r",
											"    for ( let i = 0; i < length; i++ ) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"\r",
											"    return result;\r",
											"}\r",
											"var RandomWord = generateString(5);\r",
											"RandomGroupName = (\"Test\" + \"_Group\" + \"_id_\" +RandomWord).replaceAll(' ', \"\")\r",
											"console.log(RandomGroupName)\r",
											"\r",
											"pm.collectionVariables.set(\"name\", RandomGroupName);\r",
											"\r",
											"//---------------------------------------------------------------------------------------------------------------------------------------------------------------------\r",
											"\r",
											"const RandomNetworkForSendList = [\"ERC20\", \"BEP20\", \"POLYGON\", \"SOLANA\"]\r",
											"\r",
											"const RandomNetowrkForSend = Math.floor(Math.random() * RandomNetworkForSendList.length);\r",
											"pm.collectionVariables.set(\"SendNetwork\", RandomNetworkForSendList[RandomNetowrkForSend]);\r",
											"\r",
											"//---------------------------------------------------------------------------------------------------------------------------------------------------------------------\r",
											"\r",
											"const RandomNetworkForReceiveList = [\"ERC20\", \"BEP20\", \"POLYGON\", \"SOLANA\"]\r",
											"\r",
											"const RandomNetowrkForReceive = Math.floor(Math.random() * RandomNetworkForReceiveList.length);\r",
											"pm.collectionVariables.set(\"ReceiveNetwork\", RandomNetworkForReceiveList[RandomNetowrkForReceive]);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "72740bd3-2d20-4dd8-aa15-a4504387baad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"allowedMethods\": [\r\n        {\r\n            \"currency\": \"USDT\",\r\n            \"allowTransfer\": true,\r\n            \"sendNetworks\": [\r\n                \"{{SendNetwork}}\", \"{{ReceiveNetwork}}\"\r\n            ],\r\n            \"receiveNetworks\": [\r\n                \"{{ReceiveNetwork}}\", \"{{SendNetwork}}\"\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/limit"
							},
							"response": []
						},
						{
							"name": "Create limit configuration | Already existing name | Bug",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "e3df97b8-0526-4e99-8e94-720c5a64b432",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"allowedMethods\": [\r\n        {\r\n            \"currency\": \"ETH\",\r\n            \"allowTransfer\": true,\r\n            \"sendNetworks\": [\r\n                \"{{SendNetwork}}\"\r\n            ],\r\n            \"receiveNetworks\": [\r\n                \"{{ReceiveNetwork}}\"\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/limit"
							},
							"response": []
						},
						{
							"name": "Delete currency allowed method configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "838da0b6-be63-40a4-b149-0ab1650165f8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "170a0497-94c9-4dd7-ab77-4a8d80c5d6d5",
											"key": "id",
											"value": "{{ConfigID}}",
											"type": "string"
										},
										{
											"id": "d8df5737-d80e-4be4-9d74-a8134a2f3cd8",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "e9555f98-d8ce-4436-845d-d47bb3a36c1d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id"
									],
									"variable": [
										{
											"id": "6e059b44-7f5a-4eb5-b7ae-e9480deb875d",
											"key": "id",
											"value": "{{ConfigID}}",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create limit configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"if(pm.response.status == \"OK\"){\r",
											"   var response = pm.response.json();\r",
											"   if(response.length != 0){       \r",
											"            var name = pm.collectionVariables.get(\"name\");\r",
											"            pm.collectionVariables.set(\"ConfigID\", response.id);\r",
											"            //GeneralTests\r",
											"            pm.test(\"Check if name value is correct\", ()=>{\r",
											"                pm.expect(response.name).equal(name)\r",
											"            })\r",
											"            pm.test(\"Check if currency value is correct\", ()=>{\r",
											"                pm.expect(response.allowedMethods[0].currency).equal(\"USDT\")\r",
											"            })\r",
											"            pm.test(\"Check if currency value is correct\", ()=>{\r",
											"                pm.expect(response.allowedMethods[0].allowTransfer).equal(true)\r",
											"            })\r",
											"            //KeysTests\r",
											"            pm.test(\"Object Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response)[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named name\", ()=>{\r",
											"                pm.expect(Object.keys(response)[1]).equal(\"name\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named allowedMethods\", ()=>{\r",
											"                pm.expect(Object.keys(response)[2]).equal(\"allowedMethods\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named currency\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[1]).equal(\"currency\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named allowTransfer\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[2]).equal(\"allowTransfer\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named currencyAllowedMethods\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[3]).equal(\"currencyAllowedMethods\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods)[0]).equal(\"sendNetworks\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods)[1]).equal(\"receiveNetworks\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks -- netowrk\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.sendNetworks[0])[0]).equal(\"network\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks -- hidden\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.sendNetworks[0])[1]).equal(\"hidden\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks -- netowrk\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.receiveNetworks[0])[0]).equal(\"network\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks -- hidden\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.receiveNetworks[0])[1]).equal(\"hidden\")\r",
											"            })\r",
											"    }   \r",
											"   else{\r",
											"   pm.test.skip(\"You don't have auto exchange configuration in your account\")\r",
											"}\r",
											"}else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"    }\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											"const characters ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"\r",
											"function generateString(length) {\r",
											"    let result = ' ';\r",
											"    const charactersLength = characters.length;\r",
											"    for ( let i = 0; i < length; i++ ) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"\r",
											"    return result;\r",
											"}\r",
											"var RandomWord = generateString(5);\r",
											"RandomGroupName = (\"Test\" + \"_Group\" + \"_id_\" +RandomWord).replaceAll(' ', \"\")\r",
											"console.log(RandomGroupName)\r",
											"\r",
											"pm.collectionVariables.set(\"name\", RandomGroupName);\r",
											"\r",
											"//---------------------------------------------------------------------------------------------------------------------------------------------------------------------\r",
											"\r",
											"const RandomNetworkForSendList = [\"ERC20\", \"BEP20\", \"POLYGON\", \"SOLANA\"]\r",
											"\r",
											"const RandomNetowrkForSend = Math.floor(Math.random() * RandomNetworkForSendList.length);\r",
											"pm.collectionVariables.set(\"SendNetwork\", RandomNetworkForSendList[RandomNetowrkForSend]);\r",
											"\r",
											"//---------------------------------------------------------------------------------------------------------------------------------------------------------------------\r",
											"\r",
											"const RandomNetworkForReceiveList = [\"ERC20\", \"BEP20\", \"POLYGON\", \"SOLANA\"]\r",
											"\r",
											"const RandomNetowrkForReceive = Math.floor(Math.random() * RandomNetworkForReceiveList.length);\r",
											"pm.collectionVariables.set(\"ReceiveNetwork\", RandomNetworkForReceiveList[RandomNetowrkForReceive]);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "49d7b9dc-0460-4aac-8e8b-4c05bebdffde",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"allowedMethods\": [\r\n        {\r\n            \"currency\": \"USDT\",\r\n            \"allowTransfer\": true,\r\n            \"sendNetworks\": [\r\n                \"{{SendNetwork}}\", \"{{ReceiveNetwork}}\"\r\n            ],\r\n            \"receiveNetworks\": [\r\n                \"{{ReceiveNetwork}}\", \"{{SendNetwork}}\"\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/limit"
							},
							"response": []
						},
						{
							"name": "Update limit group name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"if(pm.response.status == \"OK\"){\r",
											"   var response = pm.response.json();\r",
											"   if(response.length != 0){       \r",
											"            var name = pm.collectionVariables.get(\"name\");\r",
											"            pm.collectionVariables.set(\"ConfigID\", response.id);\r",
											"            //GeneralTests\r",
											"            pm.test(\"Check if name value is correct\", ()=>{\r",
											"                pm.expect(response.name).equal(name)\r",
											"            })\r",
											"            pm.test(\"Check if currency value is correct\", ()=>{\r",
											"                pm.expect(response.allowedMethods[0].currency).equal(\"USDT\")\r",
											"            })\r",
											"            pm.test(\"Check if currency value is correct\", ()=>{\r",
											"                pm.expect(response.allowedMethods[0].allowTransfer).equal(true)\r",
											"            })\r",
											"            //KeysTests\r",
											"            pm.test(\"Object Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response)[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named name\", ()=>{\r",
											"                pm.expect(Object.keys(response)[1]).equal(\"name\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named allowedMethods\", ()=>{\r",
											"                pm.expect(Object.keys(response)[2]).equal(\"allowedMethods\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named currency\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[1]).equal(\"currency\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named allowTransfer\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[2]).equal(\"allowTransfer\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named currencyAllowedMethods\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[3]).equal(\"currencyAllowedMethods\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods)[0]).equal(\"sendNetworks\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods)[1]).equal(\"receiveNetworks\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks -- netowrk\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.sendNetworks[0])[0]).equal(\"network\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks -- hidden\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.sendNetworks[0])[1]).equal(\"hidden\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks -- netowrk\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.receiveNetworks[0])[0]).equal(\"network\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks -- hidden\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.receiveNetworks[0])[1]).equal(\"hidden\")\r",
											"            })\r",
											"    }   \r",
											"   else{\r",
											"   pm.test.skip(\"You don't have auto exchange configuration in your account\")\r",
											"}\r",
											"}else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"    }\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											"const characters ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"\r",
											"function generateString(length) {\r",
											"    let result = ' ';\r",
											"    const charactersLength = characters.length;\r",
											"    for ( let i = 0; i < length; i++ ) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"\r",
											"    return result;\r",
											"}\r",
											"var RandomWord = generateString(5);\r",
											"RandomGroupName = (\"Test\" + \"_Group\" + \"_id_\" +RandomWord).replaceAll(' ', \"\")\r",
											"console.log(RandomGroupName)\r",
											"\r",
											"pm.collectionVariables.set(\"name\", RandomGroupName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "9b86ffe3-2486-4ee9-8450-d7438af5c1e7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/name?name={{name}}",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"name"
									],
									"query": [
										{
											"key": "name",
											"value": "{{name}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{ConfigID}}",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete currency allowed method configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "6f523c7f-5997-41df-8c74-602c960861b6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "170a0497-94c9-4dd7-ab77-4a8d80c5d6d5",
											"key": "id",
											"value": "{{ConfigID}}",
											"type": "string"
										},
										{
											"id": "d8df5737-d80e-4be4-9d74-a8134a2f3cd8",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "2877ad94-925f-4a1f-8ac9-9906681a1a8f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id"
									],
									"variable": [
										{
											"id": "6e059b44-7f5a-4eb5-b7ae-e9480deb875d",
											"key": "id",
											"value": "{{ConfigID}}",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create limit configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"if(pm.response.status == \"OK\"){\r",
											"   var response = pm.response.json();\r",
											"   if(response.length != 0){       \r",
											"            var name = pm.collectionVariables.get(\"name\");\r",
											"            pm.collectionVariables.set(\"ConfigID\", response.id);\r",
											"            //GeneralTests\r",
											"            pm.test(\"Check if name value is correct\", ()=>{\r",
											"                pm.expect(response.name).equal(name)\r",
											"            })\r",
											"            pm.test(\"Check if currency value is correct\", ()=>{\r",
											"                pm.expect(response.allowedMethods[0].currency).equal(\"USDT\")\r",
											"            })\r",
											"            pm.test(\"Check if currency value is correct\", ()=>{\r",
											"                pm.expect(response.allowedMethods[0].allowTransfer).equal(true)\r",
											"            })\r",
											"            //KeysTests\r",
											"            pm.test(\"Object Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response)[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named name\", ()=>{\r",
											"                pm.expect(Object.keys(response)[1]).equal(\"name\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named allowedMethods\", ()=>{\r",
											"                pm.expect(Object.keys(response)[2]).equal(\"allowedMethods\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named currency\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[1]).equal(\"currency\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named allowTransfer\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[2]).equal(\"allowTransfer\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named currencyAllowedMethods\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[3]).equal(\"currencyAllowedMethods\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods)[0]).equal(\"sendNetworks\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods)[1]).equal(\"receiveNetworks\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks -- netowrk\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.sendNetworks[0])[0]).equal(\"network\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks -- hidden\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.sendNetworks[0])[1]).equal(\"hidden\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks -- netowrk\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.receiveNetworks[0])[0]).equal(\"network\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks -- hidden\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.receiveNetworks[0])[1]).equal(\"hidden\")\r",
											"            })\r",
											"    }   \r",
											"   else{\r",
											"   pm.test.skip(\"You don't have auto exchange configuration in your account\")\r",
											"}\r",
											"}else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"    }\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											"const characters ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"\r",
											"function generateString(length) {\r",
											"    let result = ' ';\r",
											"    const charactersLength = characters.length;\r",
											"    for ( let i = 0; i < length; i++ ) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"\r",
											"    return result;\r",
											"}\r",
											"var RandomWord = generateString(5);\r",
											"RandomGroupName = (\"Test\" + \"_Group\" + \"_id_\" +RandomWord).replaceAll(' ', \"\")\r",
											"console.log(RandomGroupName)\r",
											"\r",
											"pm.collectionVariables.set(\"name\", RandomGroupName);\r",
											"\r",
											"//---------------------------------------------------------------------------------------------------------------------------------------------------------------------\r",
											"\r",
											"const RandomNetworkForSendList = [\"ERC20\", \"BEP20\", \"POLYGON\", \"SOLANA\"]\r",
											"\r",
											"const RandomNetowrkForSend = Math.floor(Math.random() * RandomNetworkForSendList.length);\r",
											"pm.collectionVariables.set(\"SendNetwork\", RandomNetworkForSendList[RandomNetowrkForSend]);\r",
											"\r",
											"//---------------------------------------------------------------------------------------------------------------------------------------------------------------------\r",
											"\r",
											"const RandomNetworkForReceiveList = [\"ERC20\", \"BEP20\", \"POLYGON\", \"SOLANA\"]\r",
											"\r",
											"const RandomNetowrkForReceive = Math.floor(Math.random() * RandomNetworkForReceiveList.length);\r",
											"pm.collectionVariables.set(\"ReceiveNetwork\", RandomNetworkForReceiveList[RandomNetowrkForReceive]);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "726bea4c-bc90-4096-b541-e3f690787476",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"allowedMethods\": [\r\n        {\r\n            \"currency\": \"USDT\",\r\n            \"allowTransfer\": true,\r\n            \"sendNetworks\": [\r\n                \"{{SendNetwork}}\", \"{{ReceiveNetwork}}\"\r\n            ],\r\n            \"receiveNetworks\": [\r\n                \"{{ReceiveNetwork}}\", \"{{SendNetwork}}\"\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/limit"
							},
							"response": []
						},
						{
							"name": "Update allow methods configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"if(pm.response.status == \"OK\"){\r",
											"   var response = pm.response.json();\r",
											"   if(response.length != 0){       \r",
											"            //GeneralTests\r",
											"            pm.test(\"Check if currency value is correct\", ()=>{\r",
											"                pm.expect(response.allowedMethods[0].currency).equal(\"USDT\")\r",
											"            })\r",
											"            pm.test(\"Check if currency value is correct\", ()=>{\r",
											"                pm.expect(response.allowedMethods[0].allowTransfer).equal(true)\r",
											"            })\r",
											"            //KeysTests\r",
											"            pm.test(\"Object Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response)[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named name\", ()=>{\r",
											"                pm.expect(Object.keys(response)[1]).equal(\"name\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named allowedMethods\", ()=>{\r",
											"                pm.expect(Object.keys(response)[2]).equal(\"allowedMethods\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named currency\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[1]).equal(\"currency\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named allowTransfer\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[2]).equal(\"allowTransfer\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named currencyAllowedMethods\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0])[3]).equal(\"currencyAllowedMethods\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods)[0]).equal(\"sendNetworks\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods)[1]).equal(\"receiveNetworks\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks -- netowrk\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.sendNetworks[0])[0]).equal(\"network\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named sendNetworks -- hidden\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.sendNetworks[0])[1]).equal(\"hidden\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks -- netowrk\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.receiveNetworks[0])[0]).equal(\"network\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named receiveNetworks -- hidden\", ()=>{\r",
											"                pm.expect(Object.keys(response.allowedMethods[0].currencyAllowedMethods.receiveNetworks[0])[1]).equal(\"hidden\")\r",
											"            })\r",
											"    }   \r",
											"   else{\r",
											"   pm.test.skip(\"You don't have auto exchange configuration in your account\")\r",
											"}\r",
											"}else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"    }\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											"const characters ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"\r",
											"function generateString(length) {\r",
											"    let result = ' ';\r",
											"    const charactersLength = characters.length;\r",
											"    for ( let i = 0; i < length; i++ ) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"\r",
											"    return result;\r",
											"}\r",
											"var RandomWord = generateString(5);\r",
											"RandomGroupName = (\"Test\" + \"_Group\" + \"_id_\" +RandomWord).replaceAll(' ', \"\")\r",
											"console.log(RandomGroupName)\r",
											"\r",
											"pm.collectionVariables.set(\"name\", RandomGroupName);\r",
											"\r",
											"//---------------------------------------------------------------------------------------------------------------------------------------------------------------------\r",
											"\r",
											"const RandomNetworkForSendList = [\"ERC20\", \"BEP20\", \"POLYGON\", \"SOLANA\"]\r",
											"\r",
											"const RandomNetowrkForSend = Math.floor(Math.random() * RandomNetworkForSendList.length);\r",
											"pm.collectionVariables.set(\"SendNetwork\", RandomNetworkForSendList[RandomNetowrkForSend]);\r",
											"\r",
											"//---------------------------------------------------------------------------------------------------------------------------------------------------------------------\r",
											"\r",
											"const RandomNetworkForReceiveList = [\"ERC20\", \"BEP20\", \"POLYGON\", \"SOLANA\"]\r",
											"\r",
											"const RandomNetowrkForReceive = Math.floor(Math.random() * RandomNetworkForReceiveList.length);\r",
											"pm.collectionVariables.set(\"ReceiveNetwork\", RandomNetworkForReceiveList[RandomNetowrkForReceive]);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "5334cf5f-4f57-4d86-ad43-88c9f35e771f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowTransfer\": true,\r\n  \"sendNetworks\": [\r\n    \"{{ReceiveNetwork}}\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"{{SendNetwork}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{ConfigID}}",
											"type": "string"
										},
										{
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete currency allowed method configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "da546ef4-25ce-4523-90c9-8a78dea8c927",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "170a0497-94c9-4dd7-ab77-4a8d80c5d6d5",
											"key": "id",
											"value": "{{ConfigID}}",
											"type": "string"
										},
										{
											"id": "d8df5737-d80e-4be4-9d74-a8134a2f3cd8",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "8a08ffa2-6d15-4786-b945-94912ec04b0b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id"
									],
									"variable": [
										{
											"id": "6e059b44-7f5a-4eb5-b7ae-e9480deb875d",
											"key": "id",
											"value": "{{ConfigID}}",
											"type": "string"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_id": "616a2a06-cc76-415d-bd3c-4d484770bc8a",
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative TC",
					"item": [
						{
							"name": "Get limit by id | Invalid id | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "a636a344-6ccb-4e65-96c7-5459070a62d9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/limit/:id",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kas12",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get limit by id | Invalid id | out of the range",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message should be LimitGroupEntity with id 1000 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"LimitGroupEntity with id 1000 not found\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "3f99161a-ad22-4213-b09f-7fa4f4928bcd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/limit/:id",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1000",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get limit by id | Invalid id | Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message should be LimitGroupEntity with id 0 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"LimitGroupEntity with id 0 not found\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "dcb24b4e-d754-4703-8143-6b5aaddd6bbe",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/limit/:id",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "0",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get limit by id | Invalid id | Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message should be LimitGroupEntity with id -2 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"LimitGroupEntity with id -2 not found\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "a59d1e6c-6301-4124-a0c6-391c45b82d31",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/limit/:id",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "-2",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create limit configuration | empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400 Bad Reuqest\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be name Limit group name must be provided\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"name Limit group name must be provided\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "b30be2e3-d2fd-405d-ad1c-92be0f4803a6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"allowedMethods\": [\r\n        {\r\n            \"currency\": \"USDT\",\r\n            \"allowTransfer\": false,\r\n            \"sendNetworks\": [\r\n                \"{{SendNetwork}}\", \"{{ReceiveNetwork}}\"\r\n            ],\r\n            \"receiveNetworks\": [\r\n                \"{{ReceiveNetwork}}\", \"{{SendNetwork}}\"\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/limit"
							},
							"response": []
						},
						{
							"name": "Create limit configuration | empty currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be CurrencyEntity with id  not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"CurrencyEntity with id  not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "6ee07c5c-1248-475d-bb43-7c7f2945af8d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"123\",\r\n    \"allowedMethods\": [\r\n        {\r\n            \"currency\": \"\",\r\n            \"allowTransfer\": false,\r\n            \"sendNetworks\": [\r\n                \"{{SendNetwork}}\", \"{{ReceiveNetwork}}\"\r\n            ],\r\n            \"receiveNetworks\": [\r\n                \"{{ReceiveNetwork}}\", \"{{SendNetwork}}\"\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/limit"
							},
							"response": []
						},
						{
							"name": "Create limit configuration | Invalid currency | Doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be CurrencyEntity with id Test_currency not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"CurrencyEntity with id Test_currency not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "28cc60cb-4596-4ae3-bb0e-a1aa67cee071",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"123\",\r\n    \"allowedMethods\": [\r\n        {\r\n            \"currency\": \"Test_currency\",\r\n            \"allowTransfer\": false,\r\n            \"sendNetworks\": [\r\n                \"{{SendNetwork}}\", \"{{ReceiveNetwork}}\"\r\n            ],\r\n            \"receiveNetworks\": [\r\n                \"{{ReceiveNetwork}}\", \"{{SendNetwork}}\"\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/limit"
							},
							"response": []
						},
						{
							"name": "Create limit configuration | Invalid currency | Mixedcase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be CurrencyEntity with id UsdT not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"CurrencyEntity with id UsdT not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "5d7fc508-58e7-4aef-b993-a642c1bdd03f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"123\",\r\n    \"allowedMethods\": [\r\n        {\r\n            \"currency\": \"UsdT\",\r\n            \"allowTransfer\": false,\r\n            \"sendNetworks\": [\r\n                \"{{SendNetwork}}\", \"{{ReceiveNetwork}}\"\r\n            ],\r\n            \"receiveNetworks\": [\r\n                \"{{ReceiveNetwork}}\", \"{{SendNetwork}}\"\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/limit"
							},
							"response": []
						},
						{
							"name": "Create limit configuration | Invalid allowTransfer | Mixedcase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "832ba2b3-07d4-4988-89db-de36fb0a12de",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"123\",\r\n    \"allowedMethods\": [\r\n        {\r\n            \"currency\": \"ETH\",\r\n            \"allowTransfer\": \"FalSE\",\r\n            \"sendNetworks\": [\r\n                \"{{SendNetwork}}\", \"{{ReceiveNetwork}}\"\r\n            ],\r\n            \"receiveNetworks\": [\r\n                \"{{ReceiveNetwork}}\", \"{{SendNetwork}}\"\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/limit"
							},
							"response": []
						},
						{
							"name": "Create limit configuration | Invalid allowTransfer | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "406bdf81-3cf1-48fe-bca0-87294eb1cfa1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"123\",\r\n    \"allowedMethods\": [\r\n        {\r\n            \"currency\": \"ETH\",\r\n            \"allowTransfer\": \"as1\",\r\n            \"sendNetworks\": [\r\n                \"{{SendNetwork}}\", \"{{ReceiveNetwork}}\"\r\n            ],\r\n            \"receiveNetworks\": [\r\n                \"{{ReceiveNetwork}}\", \"{{SendNetwork}}\"\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/limit"
							},
							"response": []
						},
						{
							"name": "Create limit configuration | Invalid send network | Lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "bd3406f4-6206-43d4-b2eb-bca3742d3cb3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"123\",\r\n    \"allowedMethods\": [\r\n        {\r\n            \"currency\": \"ETH\",\r\n            \"allowTransfer\": true,\r\n            \"sendNetworks\": [\r\n                \"erc20\"\r\n            ],\r\n            \"receiveNetworks\": [\r\n                \"{{ReceiveNetwork}}\"\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/limit"
							},
							"response": []
						},
						{
							"name": "Create limit configuration | Invalid send network | Mixedcase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "db63f1e9-eab2-4f7c-bb0e-93b7ef68becf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"123\",\r\n    \"allowedMethods\": [\r\n        {\r\n            \"currency\": \"ETH\",\r\n            \"allowTransfer\": true,\r\n            \"sendNetworks\": [\r\n                \"ErC20\"\r\n            ],\r\n            \"receiveNetworks\": [\r\n                \"{{ReceiveNetwork}}\"\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/limit"
							},
							"response": []
						},
						{
							"name": "Create limit configuration | Invalid send network | Doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "2da4ea41-fa62-40b8-a06e-c02a6830010d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"123\",\r\n    \"allowedMethods\": [\r\n        {\r\n            \"currency\": \"ETH\",\r\n            \"allowTransfer\": true,\r\n            \"sendNetworks\": [\r\n                \"Test_network\"\r\n            ],\r\n            \"receiveNetworks\": [\r\n                \"{{ReceiveNetwork}}\"\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/limit"
							},
							"response": []
						},
						{
							"name": "Create limit configuration | empty send network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "398f5197-0e5b-457a-8b4d-8b2903eb74c3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"123\",\r\n    \"allowedMethods\": [\r\n        {\r\n            \"currency\": \"ETH\",\r\n            \"allowTransfer\": true,\r\n            \"sendNetworks\": [\r\n                \"\"\r\n            ],\r\n            \"receiveNetworks\": [\r\n                \"{{ReceiveNetwork}}\"\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/limit"
							},
							"response": []
						},
						{
							"name": "Create limit configuration | empty receive network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "091f6f9a-9140-4bf3-a950-6b0bf69e6389",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"123\",\r\n    \"allowedMethods\": [\r\n        {\r\n            \"currency\": \"ETH\",\r\n            \"allowTransfer\": true,\r\n            \"sendNetworks\": [\r\n                \"{{SendNetwork}}\"\r\n            ],\r\n            \"receiveNetworks\": [\r\n                \"\"\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/limit"
							},
							"response": []
						},
						{
							"name": "Create limit configuration | Invalid receive network | Lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "8dd0df9f-9736-4a95-a350-d9852820094f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"123\",\r\n    \"allowedMethods\": [\r\n        {\r\n            \"currency\": \"ETH\",\r\n            \"allowTransfer\": true,\r\n            \"sendNetworks\": [\r\n                \"{{SendNetwork}}\"\r\n            ],\r\n            \"receiveNetworks\": [\r\n                \"bep20\"\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/limit"
							},
							"response": []
						},
						{
							"name": "Create limit configuration | Invalid receive network | Mixedcase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "d20dc95c-d6a8-424f-888f-1bec02ac777d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"123\",\r\n    \"allowedMethods\": [\r\n        {\r\n            \"currency\": \"ETH\",\r\n            \"allowTransfer\": true,\r\n            \"sendNetworks\": [\r\n                \"{{SendNetwork}}\"\r\n            ],\r\n            \"receiveNetworks\": [\r\n                \"BeP20\"\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/limit"
							},
							"response": []
						},
						{
							"name": "Create limit configuration | Invalid receive network | Doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "d918672b-e55a-4cc8-9468-b05c125501ea",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"123\",\r\n    \"allowedMethods\": [\r\n        {\r\n            \"currency\": \"ETH\",\r\n            \"allowTransfer\": true,\r\n            \"sendNetworks\": [\r\n                \"{{SendNetwork}}\"\r\n            ],\r\n            \"receiveNetworks\": [\r\n                \"Test_currency\"\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/limit"
							},
							"response": []
						},
						{
							"name": "Delete currency allowed method configurations | Invalid id | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "51b6e831-48ce-42d5-b0e9-5d1c437ef6ba",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"key": "id",
											"value": "aas",
											"type": "string"
										},
										{
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete currency allowed method configurations | Invalid id | out of the range",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message should be LimitGroupEntity with id 13213123 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"LimitGroupEntity with id 13213123 not found\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "45609911-198b-4e25-b6b0-ad382f37a850",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"key": "id",
											"value": "13213123",
											"type": "string"
										},
										{
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete currency allowed method configurations | Invalid id | Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message should be LimitGroupEntity with id 0 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"LimitGroupEntity with id 0 not found\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "fa2a971b-f80c-4a9f-a92f-5fa84ac32f71",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"key": "id",
											"value": "0",
											"type": "string"
										},
										{
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete currency allowed method configurations | Invalid id | Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message should be LimitGroupEntity with id -1 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"LimitGroupEntity with id -1 not found\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "ffc8442e-fcad-491c-9540-9d82b4a6f31c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"key": "id",
											"value": "-1",
											"type": "string"
										},
										{
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete currency allowed method configurations | Invalid coin | Lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message should be CurrencyEntity with id usdt not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"CurrencyEntity with id usdt not found\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "440a3240-9a09-4543-8d4c-e9902c11fae8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"type": "string"
										},
										{
											"key": "currency",
											"value": "usdt",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete currency allowed method configurations | Invalid coin | Mixedcase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message should be CurrencyEntity with id usdt not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"CurrencyEntity with id usdt not found\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "160a4097-6a54-4ed2-b743-5a54d521db27",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "f79a9cb0-b54e-4223-97bc-aa0d16af19b9",
											"key": "id",
											"value": "1",
											"type": "string"
										},
										{
											"id": "4afa169c-5ac5-4abb-a2ea-eede789cb702",
											"key": "currency",
											"value": "usdt",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update limit group name | Empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400 Bad Reuqest\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be name Limit group name must be provided\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Limit group name must be provided\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "f6773da2-6821-499a-a989-58a088f1e4be",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/name?name=",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"name"
									],
									"query": [
										{
											"key": "name",
											"value": ""
										}
									],
									"variable": [
										{
											"id": "fa9eaeaf-2c1c-44b8-881a-5ab03db80dfc",
											"key": "id",
											"value": "{{ConfigID}}",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update limit group name | default group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 403 Forbidden\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be name Limit group name must be provided\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Default limit group cannot be renamed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "99001e63-fdc0-467e-aa13-2d68f44840dc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/name?name=DEFAULT_LIMIT_GROUP",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"name"
									],
									"query": [
										{
											"key": "name",
											"value": "DEFAULT_LIMIT_GROUP"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update limit group name | Already exist name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const messageDesc = pm.response.json().messageDescription\r",
											"\r",
											"pm.test(\"Error message should be Limit group with name DEFAULT_LIMIT_GROUP already exists\", ()=>{\r",
											"    pm.expect(\"Limit group with name DEFAULT_LIMIT_GROUP already exists\").equal(messageDesc)\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "bc0071f9-9bec-44cf-ad5b-662ee8736b1f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/name?name=DEFAULT_LIMIT_GROUP",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"name"
									],
									"query": [
										{
											"key": "name",
											"value": "DEFAULT_LIMIT_GROUP"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "3",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update limit group name | Invalid id | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "f2fcaad2-e879-47c6-8d54-b57d269be9d7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/name?name={{name}}",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"name"
									],
									"query": [
										{
											"key": "name",
											"value": "{{name}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "as",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update limit group name | Invalid id | out of the range",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be name LimitGroupEntity with id 123213123 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"LimitGroupEntity with id 123213123 not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "bbabb0cb-ddb1-4b5d-b1e5-a47e050099dc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/name?name={{name}}",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"name"
									],
									"query": [
										{
											"key": "name",
											"value": "{{name}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "123213123",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update limit group name | Invalid id | zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be name LimitGroupEntity with id 0 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"LimitGroupEntity with id 0 not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "e69b7dc5-c9f9-4258-a1e9-71a67a7f2f72",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/name?name={{name}}",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"name"
									],
									"query": [
										{
											"key": "name",
											"value": "{{name}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "0",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update limit group name | Invalid id | Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be name LimitGroupEntity with id -1 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"LimitGroupEntity with id -1 not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "d5935f50-4c9b-4dde-9d47-2929b259903a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/name?name={{name}}",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"name"
									],
									"query": [
										{
											"key": "name",
											"value": "{{name}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "-1",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update allow methods configuration | Invalid allowTransfer | Mixedcase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "c383fe3b-ff56-4157-832a-8b28018bcc92",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowTransfer\": \"tRue\",\r\n  \"sendNetworks\": [\r\n    \"{{ReceiveNetwork}}\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"{{SendNetwork}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"key": "id",
											"value": "2",
											"type": "string"
										},
										{
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update allow methods configuration | Invalid allowTransfer | Doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "0c855cd9-6230-4fb2-a2ef-c155a85dc3ae",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowTransfer\": \"AAS\",\r\n  \"sendNetworks\": [\r\n    \"{{ReceiveNetwork}}\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"{{SendNetwork}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "1e3646fc-ce85-41dc-bca6-6dabd37601ef",
											"key": "id",
											"value": "2",
											"type": "string"
										},
										{
											"id": "15ed9e6b-b8a6-4064-97bd-9e797a095823",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update allow methods configuration | Empty allowTransfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "0a5ccf75-1dc6-470c-a249-51818a37eb6e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowTransfer\": \"\",\r\n  \"sendNetworks\": [\r\n    \"{{ReceiveNetwork}}\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"{{SendNetwork}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"key": "id",
											"value": "2",
											"type": "string"
										},
										{
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update allow methods configuration | Invalid sendNetwork | Lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "bf2b7bff-d221-4b05-ae7b-fef99ae597b6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowTransfer\": \"\",\r\n  \"sendNetworks\": [\r\n    \"erc20\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"{{SendNetwork}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "144dd9f9-4f8a-456d-b7d3-074f26ded60c",
											"key": "id",
											"value": "2",
											"type": "string"
										},
										{
											"id": "3fca7c3d-9ab1-4b03-a8ef-0ae5c9296fe2",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update allow methods configuration | Invalid sendNetwork | Mixedcase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "ea14dfed-8e27-4f57-bb36-cb10bb56ff67",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowTransfer\": \"\",\r\n  \"sendNetworks\": [\r\n    \"ErC20\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"{{SendNetwork}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "144dd9f9-4f8a-456d-b7d3-074f26ded60c",
											"key": "id",
											"value": "2",
											"type": "string"
										},
										{
											"id": "3fca7c3d-9ab1-4b03-a8ef-0ae5c9296fe2",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update allow methods configuration | Invalid sendNetwork | Doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "cc417f54-33d1-4bae-ac64-ec0aca8bd52f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowTransfer\": \"true\",\r\n  \"sendNetworks\": [\r\n    \"tEST_NETWORK\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"{{SendNetwork}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "144dd9f9-4f8a-456d-b7d3-074f26ded60c",
											"key": "id",
											"value": "2",
											"type": "string"
										},
										{
											"id": "3fca7c3d-9ab1-4b03-a8ef-0ae5c9296fe2",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update allow methods configuration | Empty sendNetwork",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "03cbe04a-8537-4096-b1c6-949c541d776f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowTransfer\": \"true\",\r\n  \"sendNetworks\": [\r\n    \"\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"{{SendNetwork}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "144dd9f9-4f8a-456d-b7d3-074f26ded60c",
											"key": "id",
											"value": "2",
											"type": "string"
										},
										{
											"id": "3fca7c3d-9ab1-4b03-a8ef-0ae5c9296fe2",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update allow methods configuration | Empty ReceiveNetowrk",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "cd9f2e48-7f3a-451c-bb67-34b4e4542146",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowTransfer\": \"true\",\r\n  \"sendNetworks\": [\r\n    \"{{ReceiveNetwork}}\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "144dd9f9-4f8a-456d-b7d3-074f26ded60c",
											"key": "id",
											"value": "2",
											"type": "string"
										},
										{
											"id": "3fca7c3d-9ab1-4b03-a8ef-0ae5c9296fe2",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update allow methods configuration | Invalid ReceiveNetowrk | Lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "a7c786bb-3d76-492d-89f9-ac1628c186fe",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowTransfer\": \"true\",\r\n  \"sendNetworks\": [\r\n    \"{{ReceiveNetwork}}\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"erc20\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency?allowTransfer=true&sendNetworks={{SendNetwork}}&receiveNetworks=erc20",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"query": [
										{
											"key": "allowTransfer",
											"value": "true"
										},
										{
											"key": "sendNetworks",
											"value": "{{SendNetwork}}"
										},
										{
											"key": "receiveNetworks",
											"value": "erc20"
										}
									],
									"variable": [
										{
											"id": "144dd9f9-4f8a-456d-b7d3-074f26ded60c",
											"key": "id",
											"value": "2",
											"type": "string"
										},
										{
											"id": "3fca7c3d-9ab1-4b03-a8ef-0ae5c9296fe2",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update allow methods configuration | Invalid ReceiveNetowrk | Mixedcase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "475938e1-d294-4d2f-9051-e5ca672481bd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowTransfer\": \"true\",\r\n  \"sendNetworks\": [\r\n    \"{{ReceiveNetwork}}\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"BeP20\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "144dd9f9-4f8a-456d-b7d3-074f26ded60c",
											"key": "id",
											"value": "2",
											"type": "string"
										},
										{
											"id": "3fca7c3d-9ab1-4b03-a8ef-0ae5c9296fe2",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update allow methods configuration | Invalid ReceiveNetowrk | Doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "2343ecaf-9312-41f7-a0d5-6e3321743200",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowTransfer\": \"true\",\r\n  \"sendNetworks\": [\r\n    \"{{ReceiveNetwork}}\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"Test_network\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "144dd9f9-4f8a-456d-b7d3-074f26ded60c",
											"key": "id",
											"value": "2",
											"type": "string"
										},
										{
											"id": "3fca7c3d-9ab1-4b03-a8ef-0ae5c9296fe2",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update allow methods configuration | Invalid id | Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404)\r",
											"});\r",
											"\r",
											"const messageDesc = pm.response.json().messageDescription\r",
											"\r",
											"pm.test(\"Error message should be LimitGroupEntity with id 0 not found\", ()=>{\r",
											"    pm.expect(\"LimitGroupEntity with id 0 not found\").equal(messageDesc)\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "c50c93ea-7bf1-4e45-ab75-8f891fd39506",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowTransfer\": \"true\",\r\n  \"sendNetworks\": [\r\n    \"{{ReceiveNetwork}}\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"{{SendNetwork}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"key": "id",
											"value": "0",
											"type": "string"
										},
										{
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update allow methods configuration | Invalid id | Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404)\r",
											"});\r",
											"\r",
											"const messageDesc = pm.response.json().messageDescription\r",
											"\r",
											"pm.test(\"Error message should be LimitGroupEntity with id 0 not found\", ()=>{\r",
											"    pm.expect(\"LimitGroupEntity with id -1 not found\").equal(messageDesc)\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "01179892-a1c2-475e-af8d-83445c95f184",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowTransfer\": \"true\",\r\n  \"sendNetworks\": [\r\n    \"{{ReceiveNetwork}}\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"{{SendNetwork}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"key": "id",
											"value": "-1",
											"type": "string"
										},
										{
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update allow methods configuration | Invalid id | Out of the range",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404)\r",
											"});\r",
											"\r",
											"const messageDesc = pm.response.json().messageDescription\r",
											"\r",
											"pm.test(\"Error message should be LimitGroupEntity with id 10000 not found\", ()=>{\r",
											"    pm.expect(\"LimitGroupEntity with id 10000 not found\").equal(messageDesc)\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "c9a2bb1e-edff-4b2c-875f-53f54c2eb72b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowTransfer\": \"true\",\r\n  \"sendNetworks\": [\r\n    \"{{ReceiveNetwork}}\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"{{SendNetwork}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"key": "id",
											"value": "10000",
											"type": "string"
										},
										{
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update allow methods configuration | Invalid id | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "41089efa-a3c3-483e-9c32-c78a64dfd970",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowTransfer\": \"true\",\r\n  \"sendNetworks\": [\r\n    \"{{ReceiveNetwork}}\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"{{SendNetwork}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"key": "id",
											"value": "as12",
											"type": "string"
										},
										{
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update allow methods configuration | Invalid currency | Lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be name CurrencyEntity with id usdt not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"CurrencyEntity with id usdt not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "e8c1d3a6-714e-4677-968a-acf03dc72a11",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowTransfer\": \"true\",\r\n  \"sendNetworks\": [\r\n    \"{{ReceiveNetwork}}\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"{{SendNetwork}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"variable": [
										{
											"key": "id",
											"value": "2",
											"type": "string"
										},
										{
											"key": "currency",
											"value": "usdt",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update allow methods configuration | Invalid currency | Mixedcase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be name CurrencyEntity with id UsDT not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"CurrencyEntity with id UsDT not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "89149325-feef-46ad-a247-cefa238cc81e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowTransfer\": \"true\",\r\n  \"sendNetworks\": [\r\n    \"{{ReceiveNetwork}}\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"{{SendNetwork}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency?allowTransfer=true&sendNetworks={{SendNetwork}}&receiveNetworks={{ReceiveNetwork}}",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"query": [
										{
											"key": "allowTransfer",
											"value": "true"
										},
										{
											"key": "sendNetworks",
											"value": "{{SendNetwork}}"
										},
										{
											"key": "receiveNetworks",
											"value": "{{ReceiveNetwork}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "2",
											"type": "string"
										},
										{
											"key": "currency",
											"value": "UsDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update allow methods configuration | Invalid currency | Doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be name CurrencyEntity with id Test_currency not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"CurrencyEntity with id Test_currency not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "3402936a-4ff1-41af-80fe-7c426665efcb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"allowTransfer\": \"true\",\r\n  \"sendNetworks\": [\r\n    \"{{ReceiveNetwork}}\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"{{SendNetwork}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/limit/:id/currency/:currency?allowTransfer=true&sendNetworks={{SendNetwork}}&receiveNetworks={{ReceiveNetwork}}",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"limit",
										":id",
										"currency",
										":currency"
									],
									"query": [
										{
											"key": "allowTransfer",
											"value": "true"
										},
										{
											"key": "sendNetworks",
											"value": "{{SendNetwork}}"
										},
										{
											"key": "receiveNetworks",
											"value": "{{ReceiveNetwork}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "2",
											"type": "string"
										},
										{
											"key": "currency",
											"value": "Test_currency",
											"type": "string"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_id": "f65d772e-d652-4fe9-bced-6b0df6eb912a",
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete currency allowed method configurations | empty id | Not ready for realease",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "562dcb57-d8be-4057-8dfc-4305d736b5ea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
							"host": [
								"{{Admin_URL}}"
							],
							"path": [
								"limit",
								":id",
								"currency",
								":currency"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"type": "string"
								},
								{
									"key": "currency",
									"value": "USDT",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update limit group name | Empty id | Not ready for release",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
								"exec": [
									"pm.test(\"Status code is 400 Bad Reuqest\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "beaaedef-14b4-41fc-94bd-5e5e2ed7ad9a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Admin_URL}}/limit/:id/name?name=test_group",
							"host": [
								"{{Admin_URL}}"
							],
							"path": [
								"limit",
								":id",
								"name"
							],
							"query": [
								{
									"key": "name",
									"value": "test_group"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get limit by id |  Empty id | Not ready for release",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "1381d508-5c6c-4fbd-bebf-2405af71666b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Admin_URL}}/limit/:id",
							"host": [
								"{{Admin_URL}}"
							],
							"path": [
								"limit",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update allow methods configuration | Empty id | Not ready for release",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "f7bf3397-78d7-4270-9ff9-15f348191619",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Admin_URL}}/limit/:id/currency/:currency?allowTransfer=true&sendNetworks={{SendNetwork}}&receiveNetworks={{ReceiveNetwork}}",
							"host": [
								"{{Admin_URL}}"
							],
							"path": [
								"limit",
								":id",
								"currency",
								":currency"
							],
							"query": [
								{
									"key": "allowTransfer",
									"value": "true"
								},
								{
									"key": "sendNetworks",
									"value": "{{SendNetwork}}"
								},
								{
									"key": "receiveNetworks",
									"value": "{{ReceiveNetwork}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"type": "string"
								},
								{
									"key": "currency",
									"value": "USDT",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update allow methods configuration | Empty currency | Not ready for release",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1f82401-a5a4-4d65-a466-53a8c0070156",
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"const response = pm.response.json();\r",
									"pm.test(\"Error message should be name CurrencyEntity with id :currency not found\", function () {\r",
									"    pm.expect(response.messageDescription).equal(\"CurrencyEntity with id :currency not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ef095210-e7c1-4ec3-a08b-188459aece45",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "fc721721-8522-43e9-90e0-ffbdec2f04c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"allowTransfer\": \"true\",\r\n  \"sendNetworks\": [\r\n    \"{{ReceiveNetwork}}\"\r\n  ],\r\n  \"receiveNetworks\": [\r\n    \"{{SendNetwork}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Admin_URL}}/limit/:id/currency/:currency",
							"host": [
								"{{Admin_URL}}"
							],
							"path": [
								"limit",
								":id",
								"currency",
								":currency"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"type": "string"
								},
								{
									"key": "currency",
									"value": "",
									"type": "string"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "cfca74bd-0fe0-49e4-ad2b-1b440ea56a52"
		},
		{
			"name": "User group controller",
			"item": [
				{
					"name": "Positive TC",
					"item": [
						{
							"name": "Get all fee configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"var response = pm.response.json();\r",
											"\r",
											"if(pm.response.status == \"OK\"){\r",
											"const pass = () => {}\r",
											"\r",
											"   if(response.length != 0){\r",
											"       for(var  i = 0; i < response.length ; i++){\r",
											"                //KeysTests\r",
											"                 pm.test(\"Check key of param named id\", ()=>{\r",
											"                    pm.expect(Object.keys(response[i])[0]).equal(\"id\")\r",
											"                })  \r",
											"                pm.test(\"Check key of param named name\", ()=>{\r",
											"                    pm.expect(Object.keys(response[i])[1]).equal(\"name\")\r",
											"                })\r",
											"                pm.test(\"Check key of param named transactionFees\", ()=>{\r",
											"                    pm.expect(Object.keys(response[i])[2]).equal(\"transactionFees\")\r",
											"                }) \r",
											"                pm.test(\"Check key of param named swapFees\", ()=>{\r",
											"                    pm.expect(Object.keys(response[i])[3]).equal(\"swapFees\")\r",
											"                })\r",
											"                if(response[i].transactionFees.length == 0){\r",
											"                    pass();\r",
											"                }else{\r",
											"                    pm.test(\"Check key of param named id -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[i].transactionFees[0])[0]).equal(\"id\")\r",
											"                    })\r",
											"                    pm.test(\"Check key of param named currencyCode -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[i].transactionFees[0])[1]).equal(\"currencyCode\")\r",
											"                    })\r",
											"                    pm.test(\"Check key of param named network -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[i].transactionFees[0])[2]).equal(\"network\")\r",
											"                    })\r",
											"                    pm.test(\"Check key of param named transactionFee -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[i].transactionFees[0])[3]).equal(\"transactionFee\")\r",
											"                    })\r",
											"                    pm.test(\"Check key of param named transactionMinFeeAmount -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[i].transactionFees[0])[4]).equal(\"transactionMinFeeAmount\")\r",
											"                    })\r",
											"                }\r",
											"                if(response[i].swapFees.length == 0){\r",
											"                    pass();\r",
											"                }else{\r",
											"                    pm.test(\"Check key of param named id -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[i].transactionFees[0])[0]).equal(\"id\")\r",
											"                    })\r",
											"                    pm.test(\"Check key of param named currencyCode -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[i].transactionFees[0])[1]).equal(\"currencyCode\")\r",
											"                    })\r",
											"                    pm.test(\"Check key of param named network -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[i].transactionFees[0])[2]).equal(\"network\")\r",
											"                    })\r",
											"                    pm.test(\"Check key of param named transactionFee -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[i].transactionFees[0])[3]).equal(\"transactionFee\")\r",
											"                    })\r",
											"                    pm.test(\"Check key of param named transactionMinFeeAmount -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[i].transactionFees[0])[4]).equal(\"transactionMinFeeAmount\")\r",
											"                    })\r",
											"                }\r",
											"   }\r",
											"}\r",
											"}else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"    }"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "2191ab82-cfee-4330-96e3-138228071bc9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Get all fee configuration with name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"var response = pm.response.json();\r",
											"\r",
											"if(pm.response.status == \"OK\"){\r",
											"const pass = () => {}\r",
											"\r",
											"   if(response.length != 0){\r",
											"                //GeneralTests'\r",
											"                pm.test(\"Name value should be correct\", ()=>{\r",
											"                    pm.expect(response[0].name).equal(\"DEFAULT_FEE_GROUP\")\r",
											"                })\r",
											"                //KeysTests\r",
											"                pm.test(\"Check key of param named id\", ()=>{\r",
											"                    pm.expect(Object.keys(response[0])[0]).equal(\"id\")\r",
											"                })  \r",
											"                pm.test(\"Check key of param named name\", ()=>{\r",
											"                    pm.expect(Object.keys(response[0])[1]).equal(\"name\")\r",
											"                })\r",
											"                pm.test(\"Check key of param named transactionFees\", ()=>{\r",
											"                    pm.expect(Object.keys(response[0])[2]).equal(\"transactionFees\")\r",
											"                }) \r",
											"                pm.test(\"Check key of param named swapFees\", ()=>{\r",
											"                    pm.expect(Object.keys(response[0])[3]).equal(\"swapFees\")\r",
											"                })\r",
											"                if(response[0].transactionFees.length == 0){\r",
											"                    pass();\r",
											"                }else{\r",
											"                    pm.test(\"Check key of param named id -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[0].transactionFees[0])[0]).equal(\"id\")\r",
											"                    })\r",
											"                    pm.test(\"Check key of param named currencyCode -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[0].transactionFees[0])[1]).equal(\"currencyCode\")\r",
											"                    })\r",
											"                    pm.test(\"Check key of param named network -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[0].transactionFees[0])[2]).equal(\"network\")\r",
											"                    })\r",
											"                    pm.test(\"Check key of param named transactionFee -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[0].transactionFees[0])[3]).equal(\"transactionFee\")\r",
											"                    })\r",
											"                    pm.test(\"Check key of param named transactionMinFeeAmount -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[0].transactionFees[0])[4]).equal(\"transactionMinFeeAmount\")\r",
											"                    })\r",
											"                }\r",
											"                if(response[0].swapFees.length == 0){\r",
											"                    pass();\r",
											"                }else{\r",
											"                    pm.test(\"Check key of param named id -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[0].transactionFees[0])[0]).equal(\"id\")\r",
											"                    })\r",
											"                    pm.test(\"Check key of param named currencyCode -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[0].transactionFees[0])[1]).equal(\"currencyCode\")\r",
											"                    })\r",
											"                    pm.test(\"Check key of param named network -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[0].transactionFees[0])[2]).equal(\"network\")\r",
											"                    })\r",
											"                    pm.test(\"Check key of param named transactionFee -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[0].transactionFees[0])[3]).equal(\"transactionFee\")\r",
											"                    })\r",
											"                    pm.test(\"Check key of param named transactionMinFeeAmount -- TransactionFees\", ()=>{\r",
											"                        pm.expect(Object.keys(response[0].transactionFees[0])[4]).equal(\"transactionMinFeeAmount\")\r",
											"                    })\r",
											"                }\r",
											"   }\r",
											"\r",
											"}else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"    }"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "58508bab-dc21-49c8-be38-1d2502f16433",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group/fee?name=DEFAULT_FEE_GROUP",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										"fee"
									],
									"query": [
										{
											"key": "name",
											"value": "DEFAULT_FEE_GROUP"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add configuration | Transaction | Network + currency configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "e94a4204-5a49-46d6-b67e-90f686751e87",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"BTC\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"MAINNET\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Delete configuration with currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "c35c3f1d-2137-43ea-91e1-cebe590bdde4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id/fee/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id",
										"fee",
										"currency",
										":currency"
									],
									"variable": [
										{
											"key": "id",
											"value": "20",
											"type": "string"
										},
										{
											"key": "currency",
											"value": "BTC",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add configuration | Transaction | Network configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "5ad3da80-039f-44ed-92ad-a4cfdbb6855f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Delete configuration with network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "4ffbe1eb-1e54-4bb7-9090-1291ddc00ea0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id/fee/network/:network",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id",
										"fee",
										"network",
										":network"
									],
									"variable": [
										{
											"id": "cd41d97e-eaf5-4350-bf4d-aab61d864a1d",
											"key": "id",
											"value": "20",
											"type": "string"
										},
										{
											"id": "cd10d075-4348-47f4-a9ec-1a38dda7b20e",
											"key": "network",
											"value": "ERC20",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add configuration | Transaction | Currency configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "210fe446-6ef4-4b9a-967b-1bd9b0c50418",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Delete configuration with currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "76c7d79c-7b3f-4de9-9c54-1f6c5a02f5a3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id/fee/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id",
										"fee",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "b9836ffa-a32f-44f1-bc16-e708eff9b0aa",
											"key": "id",
											"value": "20",
											"type": "string"
										},
										{
											"id": "ace6b16e-5d1e-4d5f-94cf-9de92d41784b",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add configuration | Exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "30c0f28d-d293-44e4-9b82-22442cd33136",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"exchangeFee\": 1,\r\n  \"exchangeMinFeeAmount\": 1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Delete configuration with currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "f087ec05-67cc-470a-a213-38c2aed5f2b5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id/fee/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id",
										"fee",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "05691ba6-4abc-48df-8b87-78fbc8ab3cfc",
											"key": "id",
											"value": "20",
											"type": "string"
										},
										{
											"id": "3afd5664-4d0e-470d-a947-88fbb75e289f",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update configuration | Transaction | Network + currency configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "3bb3b5b1-a909-4ea5-914e-8df891a2d886",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 1,\r\n  \"currency\": \"BTC\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"MAINNET\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 2\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Delete configuration with currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "6e49574b-8bd5-409f-aa0a-955b294829a5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id/fee/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id",
										"fee",
										"currency",
										":currency"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"type": "string"
										},
										{
											"key": "currency",
											"value": "BTC",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update configuration | Network configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "909eca1e-d9b8-4a19-80f3-b1a5e3380dd2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 1,\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 3\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Delete configuration with network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "5c26c55c-a882-4f9a-a643-fbd6e628b116",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id/fee/network/:network",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id",
										"fee",
										"network",
										":network"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"type": "string"
										},
										{
											"key": "network",
											"value": "ERC20",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update configuration | Currency configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "5736f903-59f4-4397-9d62-ff361553e8e9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 1,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 3\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Delete configuration with currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "c3b9b018-4b3c-49dd-8407-c01953a9c3c8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id/fee/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id",
										"fee",
										"currency",
										":currency"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"type": "string"
										},
										{
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update configuration | Exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "aa724de4-067b-4661-aa71-af7e6e78d6d7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"exchangeFee\": 1,\r\n  \"exchangeMinFeeAmount\": 2\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Delete configuration with currency Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "40b746d6-2d72-4369-999d-c43eba40e117",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id/fee/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id",
										"fee",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "05691ba6-4abc-48df-8b87-78fbc8ab3cfc",
											"key": "id",
											"value": "20",
											"type": "string"
										},
										{
											"id": "3afd5664-4d0e-470d-a947-88fbb75e289f",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "597b5fe9-8f6f-4482-9286-0429ac4244dc",
										"exec": [
											"var response = pm.response.json();\r",
											"if(pm.response.status == \"OK\"){\r",
											"   if(response.length != 0){\r",
											"            UserGroupID = response.id\r",
											"            pm.collectionVariables.set(\"UserGroupID\", UserGroupID);\r",
											"            //GeneralTests\r",
											"            pm.test(\"Check if name value is correct\", ()=>{\r",
											"                pm.expect(response.name).equal(\"Test_user_group\")\r",
											"            })\r",
											"            //KeysTests\r",
											"            pm.test(\"Object Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response)[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named name\", ()=>{\r",
											"                pm.expect(Object.keys(response)[1]).equal(\"name\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named networkAddressLimits\", ()=>{\r",
											"                pm.expect(Object.keys(response)[2]).equal(\"networkAddressLimits\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named currencyAddressLimits\", ()=>{\r",
											"                pm.expect(Object.keys(response)[3]).equal(\"currencyAddressLimits\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named transactionFees\", ()=>{\r",
											"                pm.expect(Object.keys(response)[4]).equal(\"transactionFees\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named swapFees\", ()=>{\r",
											"                pm.expect(Object.keys(response)[5]).equal(\"swapFees\")\r",
											"            })\r",
											"    }   \r",
											"   else{\r",
											"   pm.test.skip(\"You don't have auto exchange configuration in your account\")\r",
											"}\r",
											"}else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"    }\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "f80340eb-464a-4e20-bdf5-25aa27341914",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group?name=Test_user_group",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group"
									],
									"query": [
										{
											"key": "name",
											"value": "Test_user_group"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user group name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "597b5fe9-8f6f-4482-9286-0429ac4244dc",
										"exec": [
											"var response = pm.response.json();\r",
											"if(pm.response.status == \"OK\"){\r",
											"   if(response.length != 0){\r",
											"\r",
											"            var UserGroupID = pm.collectionVariables.get(\"UserGroupID\");\r",
											"            //GeneralTests\r",
											"            pm.test(\"Check if name value is correct\", ()=>{\r",
											"                pm.expect(response.name).equal(\"UpdatedName\")\r",
											"            })\r",
											"            pm.test(\"Check if id value is correct\", ()=>{\r",
											"                pm.expect(response.id).equal(UserGroupID)\r",
											"            })\r",
											"            //KeysTests\r",
											"            pm.test(\"Object Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response)[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named name\", ()=>{\r",
											"                pm.expect(Object.keys(response)[1]).equal(\"name\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named networkAddressLimits\", ()=>{\r",
											"                pm.expect(Object.keys(response)[2]).equal(\"networkAddressLimits\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named currencyAddressLimits\", ()=>{\r",
											"                pm.expect(Object.keys(response)[3]).equal(\"currencyAddressLimits\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named transactionFees\", ()=>{\r",
											"                pm.expect(Object.keys(response)[4]).equal(\"transactionFees\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named swapFees\", ()=>{\r",
											"                pm.expect(Object.keys(response)[5]).equal(\"swapFees\")\r",
											"            })\r",
											"    }   \r",
											"   else{\r",
											"   pm.test.skip(\"You don't have auto exchange configuration in your account\")\r",
											"}\r",
											"}else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"    }\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "960f4f04-a87d-40ed-b24d-607f2f04792a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id?name=UpdatedName",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id"
									],
									"query": [
										{
											"key": "name",
											"value": "UpdatedName"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{UserGroupID}}",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "597b5fe9-8f6f-4482-9286-0429ac4244dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "826aa695-2f15-44e0-8630-bfad9205c75e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{UserGroupID}}",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user group names",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "597b5fe9-8f6f-4482-9286-0429ac4244dc",
										"exec": [
											"var response = pm.response.json();\r",
											"if(pm.response.status == \"OK\"){\r",
											"   if(response.length != 0){\r",
											"            for(let i=0; i<response.length;i++){\r",
											"            //KeysTests\r",
											"            pm.test(\"Object Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response[i])[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named name\", ()=>{\r",
											"                pm.expect(Object.keys(response[i])[1]).equal(\"name\")\r",
											"            })\r",
											"        }\r",
											"            \r",
											"    }   \r",
											"   else{\r",
											"   pm.test.skip(\"You don't have auto exchange configuration in your account\")\r",
											"}\r",
											"}else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"    }\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "4d9e0ce2-24f4-40a7-88e4-f4d456e53f1d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{Admin_URL}}/user-group/names"
							},
							"response": []
						},
						{
							"name": "Get user group limits",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "597b5fe9-8f6f-4482-9286-0429ac4244dc",
										"exec": [
											"var response = pm.response.json();\r",
											"if(pm.response.status == \"OK\"){\r",
											"   if(response.length != 0){\r",
											"            for(let i=0; i<response.length;i++){\r",
											"            //KeysTests\r",
											"            pm.test(\"Object Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response[i])[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named name\", ()=>{\r",
											"                pm.expect(Object.keys(response[i])[1]).equal(\"name\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named addressCurrencyLimits\", ()=>{\r",
											"                pm.expect(Object.keys(response[i])[2]).equal(\"addressCurrencyLimits\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named addressNetworkLimits\", ()=>{\r",
											"                pm.expect(Object.keys(response[i])[3]).equal(\"addressNetworkLimits\")\r",
											"            })\r",
											"        }\r",
											"            \r",
											"    }   \r",
											"   else{\r",
											"   pm.test.skip(\"You don't have auto exchange configuration in your account\")\r",
											"}\r",
											"}else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"    }\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "72528ce6-19c3-49ba-909a-86405363acb6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{Admin_URL}}/user-group/limits"
							},
							"response": []
						},
						{
							"name": "Get user group limits with name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "597b5fe9-8f6f-4482-9286-0429ac4244dc",
										"exec": [
											"var response = pm.response.json();\r",
											"if(pm.response.status == \"OK\"){\r",
											"   if(response.length != 0){\r",
											"            //KeysTests\r",
											"            pm.test(\"Object Check key of param named id\", ()=>{\r",
											"                pm.expect(Object.keys(response[0])[0]).equal(\"id\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named name\", ()=>{\r",
											"                pm.expect(Object.keys(response[0])[1]).equal(\"name\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named addressCurrencyLimits\", ()=>{\r",
											"                pm.expect(Object.keys(response[0])[2]).equal(\"addressCurrencyLimits\")\r",
											"            })\r",
											"            pm.test(\"Object Check key of param named addressNetworkLimits\", ()=>{\r",
											"                pm.expect(Object.keys(response[0])[3]).equal(\"addressNetworkLimits\")\r",
											"            })\r",
											"        }\r",
											"            \r",
											"   else{\r",
											"   pm.test.skip(\"You don't have auto exchange configuration in your account\")\r",
											"}\r",
											"}else{\r",
											"        pm.test(\"Failed status code\", function () {\r",
											"        let num = -1\r",
											"        if(num === -1) {\r",
											"            pm.expect.fail(\"Test is failed check status code\" + \"test status code is: \" + pm.response.code + \" \" + pm.response.status)                \r",
											"    }\r",
											"    });\r",
											"    }\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "84e173f6-e216-45b9-a5e1-85ae9c064ebf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group/limits?name=Test_group",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										"limits"
									],
									"query": [
										{
											"key": "name",
											"value": "Test_group"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_id": "639d6d05-0847-442b-ab71-0c001c9eca45",
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative TC",
					"item": [
						{
							"name": "Get all fee configuration | empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "efc74508-fa37-4706-8fca-367a410b14e2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group/fee?name=",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										"fee"
									],
									"query": [
										{
											"key": "name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all fee configuration | Invalid name | Doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "2f0727f6-b6f8-4703-be05-cb2d68119582",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group/fee?name=Name",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										"fee"
									],
									"query": [
										{
											"key": "name",
											"value": "Name"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add configuration | Empty userGroupId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "9b7ff437-1890-4267-8d6e-db85165e6f94",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": \"\",\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid  userGroupId | Doesn't exist(Out of the range)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be UserGroup with id 1213123123 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"UserGroup with id 1213123123 not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "9a7415c0-2cff-4d3a-9a86-75eec4e34b9d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 1213123123,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid  userGroupId | Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be UserGroup with id 0 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"UserGroup with id 0 not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "8c5f0181-36d2-4a54-b603-5170d8b7c5e8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 0,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid  userGroupId | Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be UserGroup with id -1 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"UserGroup with id -1 not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "4081e490-ddcd-4bfd-ae01-fbce4b5b6bfe",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": -1,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Empty currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be CurrencyEntity with id  not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"CurrencyEntity with id  not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "f9021e69-4391-4476-809d-0a2cfdc4bca7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid currency | Doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be CurrencyEntity with id test_currency not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"CurrencyEntity with id test_currency not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "644fd62f-6a5d-4d2a-a4e7-c86a4428c5eb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"test_currency\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid currency | Lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be CurrencyEntity with id usdt not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"CurrencyEntity with id usdt not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "0c634d7b-ff14-40c8-9693-13b6f1333c68",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"usdt\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid currency | Mixedcase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be CurrencyEntity with id UsDT not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"CurrencyEntity with id UsDT not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "e241993a-1c43-44e6-b511-f9e43a8a54ad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"UsDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Valid transaction fee | Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "95a171c7-208b-4bf3-84b8-083e5bd7ee01",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 0,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Delete configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "5c71e8f4-4923-40d5-81c0-97885bca5d3e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id/fee/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id",
										"fee",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "05691ba6-4abc-48df-8b87-78fbc8ab3cfc",
											"key": "id",
											"value": "20",
											"type": "string"
										},
										{
											"id": "3afd5664-4d0e-470d-a947-88fbb75e289f",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid transaction fee | Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be transactionFees[0].fee must be greater than or equal to 0\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"transactionFees[0].fee must be greater than or equal to 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "72ef21fa-98ba-4b15-b89d-1f6b480fed3c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": -1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Empty transaction fee",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be Fee percentage must be provided\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Fee percentage must be provided\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "222a6c45-526f-40fa-bd30-efd76c4ed4f1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": \"\",\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid transaction fee | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "d8fccd7c-4477-4aa6-827f-6a1b889bd7df",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": \"12as\",\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Empty transaction minFeeAmount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "e80be48a-4412-4bce-874e-376f017e4f02",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": \"\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Delete configuration with currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "09bafd4c-8a48-4b09-86d2-82aea0d83905",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id/fee/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id",
										"fee",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "6b91438a-7ea9-46ec-a527-7cdf03538ce0",
											"key": "id",
											"value": "20",
											"type": "string"
										},
										{
											"id": "8bb65299-0f4f-43a5-9910-ecfc0149c150",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid transaction minFeeAmount | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "6b72180b-b53e-43fd-917d-f385137cdebb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": \"1\",\r\n      \"minFeeAmount\": \"as\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid transaction minFeeAmount | Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be transactionFees[0].minFeeAmount must be greater than or equal to 0\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"transactionFees[0].minFeeAmount must be greater than or equal to 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "c45a1241-b2eb-4561-92ba-0272bd4ea3c0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": \"1\",\r\n      \"minFeeAmount\": -1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Valid transaction minFeeAmount | Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "529b5446-81b5-4e10-a297-8c901a8ab585",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 0\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Delete configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "d3185c97-1857-41cb-be49-eeff9948d13d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id/fee/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id",
										"fee",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "05691ba6-4abc-48df-8b87-78fbc8ab3cfc",
											"key": "id",
											"value": "20",
											"type": "string"
										},
										{
											"id": "3afd5664-4d0e-470d-a947-88fbb75e289f",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid network | Lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "0ad31c45-1914-4685-9d33-71562770b9a3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"erc20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid network | Mixedcase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "e640e0b3-fdf5-4b0a-bbca-6aed89a46e6d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"BeP20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid network | Not supported",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"const messageDesc = pm.response.json().messageDescription\r",
											"\r",
											"pm.test(\"Error message should be Unsupported network for currency\", ()=>{\r",
											"    pm.expect(\"Unsupported network for currency\").equal(messageDesc)\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "c9d2adeb-989e-4db5-a2b5-c8ff9716f5b5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"MAINNET\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid network | Doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "d881807c-d65b-430b-a2db-58b7a9fe4996",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"test_network\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Empty network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "f552e36e-af24-448b-8e2e-cc7dc6c83120",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | empty exchange fee | Details required",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "3bcfc8be-27e5-4b0a-bcd8-132b991dc684",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"exchangeFee\": \"\",\r\n  \"exchangeMinFeeAmount\": 0\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid exchange fee | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "2fff4ce8-2c96-47b7-8a14-5642abedc79f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n   \"exchangeFee\": \"as\",\r\n  \"exchangeMinFeeAmount\": 0\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid exchange fee | Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be exchangeFee must be greater than or equal to 0\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"exchangeFee must be greater than or equal to 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "511ad658-8c9b-4f02-be7a-5274d4e9a46e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n   \"exchangeFee\": -1,\r\n  \"exchangeMinFeeAmount\": 0\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid exchange fee | Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "0e124c4e-4fc1-45c6-b2d1-91d5932e7183",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n   \"exchangeFee\": -1,\r\n  \"exchangeMinFeeAmount\": 0\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid exchangeMinFeeAmount | Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be exchangeMinFeeAmount must be greater than or equal to 0\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"exchangeMinFeeAmount must be greater than or equal to 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "f7b7d434-919d-48a4-93f0-f9c4f4ece25b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n   \"exchangeFee\": 1,\r\n  \"exchangeMinFeeAmount\": -1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid exchangeMinFeeAmount | Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "31b589f5-aa5f-4442-ae2d-3b4cce64df9d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n   \"exchangeFee\": 1,\r\n  \"exchangeMinFeeAmount\": 0\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Delete configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "b05246f1-6016-46d9-bf1b-0271e79a4ed8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id/fee/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id",
										"fee",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "05691ba6-4abc-48df-8b87-78fbc8ab3cfc",
											"key": "id",
											"value": "20",
											"type": "string"
										},
										{
											"id": "3afd5664-4d0e-470d-a947-88fbb75e289f",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add configuration | Invalid exchangeMinFeeAmount | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "781661cf-d374-4009-9334-0268be5e2653",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n   \"exchangeFee\": 1,\r\n  \"exchangeMinFeeAmount\": \"as\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Add configuration | Empty exchangeMinFeeAmount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "0117dfa5-99e6-4434-9fb5-9ef2526721fe",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n   \"exchangeFee\": 1,\r\n  \"exchangeMinFeeAmount\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Delete configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "348f0fc7-6bc2-4e90-99a3-cf263758c450",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id/fee/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id",
										"fee",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "05691ba6-4abc-48df-8b87-78fbc8ab3cfc",
											"key": "id",
											"value": "20",
											"type": "string"
										},
										{
											"id": "3afd5664-4d0e-470d-a947-88fbb75e289f",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update configuration | Empty userGroupId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be The given id must not be null!\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "8d815c4f-8bcb-4de9-a25e-247183a4b814",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": \"\",\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid  userGroupId | Doesn't exist(Out of the range)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be UserGroup with id 1213123123 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"UserGroup with id 1213123123 not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "781327f2-6fd3-4723-9e88-199b41b038b3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 1213123123,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid  userGroupId | Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be UserGroup with id 0 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"UserGroup with id 0 not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "2ba5fc16-d083-4643-9da4-2675a2ac2605",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 0,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid  userGroupId | Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be UserGroup with id -1 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"UserGroup with id -1 not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "fa901b02-2274-4f4c-afcb-bbbf4c892b7f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": -1,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Empty currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be CurrencyEntity with id  not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"CurrencyEntity with id  not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "e7e00a07-aeec-4c62-b00a-b11e2cf26fd8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid currency | Doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be CurrencyEntity with id test_currency not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"CurrencyEntity with id test_currency not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "c860eee2-9165-4ef8-8c98-43feadd5f804",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"test_currency\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid currency | Lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be CurrencyEntity with id usdt not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"CurrencyEntity with id usdt not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "1ca15130-14cb-43f9-a36a-98742185469d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"usdt\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid currency | Mixedcase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be CurrencyEntity with id UsDT not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"CurrencyEntity with id UsDT not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "7be604a3-1736-4c67-b0f4-f736969d9056",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"UsDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Valid transaction fee | Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "ba1d9dd8-27ae-4f6c-bf9d-14b7004bd27c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 0,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Delete configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "9371a313-2d4c-4906-9406-50a56a00ca72",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id/fee/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id",
										"fee",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "05691ba6-4abc-48df-8b87-78fbc8ab3cfc",
											"key": "id",
											"value": "20",
											"type": "string"
										},
										{
											"id": "3afd5664-4d0e-470d-a947-88fbb75e289f",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid transaction fee | Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be transactionFees[0].fee must be greater than or equal to 0\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"transactionFees[0].fee must be greater than or equal to 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "1a7d441b-5a59-4628-b15b-2694c9f15048",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": -1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Empty transaction fee",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be Fee percentage must be provided\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Fee percentage must be provided\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "936ba391-def4-46f5-a905-138b30ee4b52",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": \"\",\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid transaction fee | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "47a9ab7c-541d-4246-8861-496eb01ef7b3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": \"12as\",\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Empty transaction minFeeAmount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "7f4672ee-5afa-49d0-b5fe-399a5c181519",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": \"\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Delete configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "bb85b415-a6d6-4849-8022-a9cdbb596f9b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id/fee/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id",
										"fee",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "05691ba6-4abc-48df-8b87-78fbc8ab3cfc",
											"key": "id",
											"value": "20",
											"type": "string"
										},
										{
											"id": "3afd5664-4d0e-470d-a947-88fbb75e289f",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid transaction minFeeAmount | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "71172228-dad9-4ee5-90be-47ad45f3c932",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": \"1\",\r\n      \"minFeeAmount\": \"as\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid transaction minFeeAmount | Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "957bc1b5-e9aa-4fb8-a1ed-68d9531ed5d1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": \"1\",\r\n      \"minFeeAmount\": -1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Valid transaction minFeeAmount | Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "3dc8559c-bbf7-4107-a335-1b9b7e6b20fc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 0\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Delete configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "b1542e49-c237-4d87-a334-3c5352f383aa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id/fee/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id",
										"fee",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "05691ba6-4abc-48df-8b87-78fbc8ab3cfc",
											"key": "id",
											"value": "20",
											"type": "string"
										},
										{
											"id": "3afd5664-4d0e-470d-a947-88fbb75e289f",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid network | Lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "43bef9b9-2b5b-4c7c-a368-715c2fb34837",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"erc20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid network | Mixedcase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "8963dc8d-c9ef-41f3-a5cb-c75b6958fe60",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"BeP20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid network | Not supported",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"const messageDesc = pm.response.json().messageDescription\r",
											"\r",
											"pm.test(\"Error message should be Unsupported network for currency\", ()=>{\r",
											"    pm.expect(\"Unsupported network for currency\").equal(messageDesc)\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "f322fe73-b84c-4b33-b516-1ca5a8b5c25d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"MAINNET\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid network | Doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "b88d02cd-ffe1-4684-b512-379b19ccf50d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"test_network\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Empty network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "42715577-f107-4059-89c6-5f9fe181ee97",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | empty exchange fee",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be Fee percentage must be provided\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"Fee percentage must be provided\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "c3891bac-c0bd-445f-a603-cdee216dbf4b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n   \"exchangeFee\": \"\",\r\n  \"exchangeMinFeeAmount\": 0\r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid exchange fee | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "508f826c-1247-42db-9366-70649cecb2de",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n   \"exchangeFee\": \"as\",\r\n  \"exchangeMinFeeAmount\": 0\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid exchange fee | Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "448f1882-d7fe-4d5c-8d8b-a73a28e9cbfb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n   \"exchangeFee\": -1,\r\n  \"exchangeMinFeeAmount\": 0\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid exchange fee | Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "9a276428-a892-432d-ad4c-df6051910d29",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n   \"exchangeFee\": -1,\r\n  \"exchangeMinFeeAmount\": 0\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid exchangeMinFeeAmount | Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const ErrorMessage = pm.response.json().messageDescription\r",
											"pm.test(\"Error message should be exchangeMinFeeAmount must be greater than or equal to 0\", ()=>{\r",
											"    pm.expect(\"exchangeMinFeeAmount must be greater than or equal to 0\").equal(ErrorMessage)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "b1a7af3a-9141-40f9-bace-bfe7faddaa87",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n   \"exchangeFee\": 1,\r\n  \"exchangeMinFeeAmount\": -1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid exchangeMinFeeAmount | Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "4886a327-fd88-4b2a-a271-80b7589c7519",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n   \"exchangeFee\": 1,\r\n  \"exchangeMinFeeAmount\": 0\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Delete configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "842c83c0-718e-4695-b7fc-19abfe6f7d49",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n  \"transactionFees\": [\r\n    {\r\n      \"network\": \"ERC20\",\r\n      \"fee\": 1,\r\n      \"minFeeAmount\": 1\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id/fee/currency/:currency",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id",
										"fee",
										"currency",
										":currency"
									],
									"variable": [
										{
											"id": "05691ba6-4abc-48df-8b87-78fbc8ab3cfc",
											"key": "id",
											"value": "20",
											"type": "string"
										},
										{
											"id": "3afd5664-4d0e-470d-a947-88fbb75e289f",
											"key": "currency",
											"value": "USDT",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update configuration  | Invalid exchangeMinFeeAmount | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "181a7a62-0871-4179-9e34-3d46c49223c8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n   \"exchangeFee\": 1,\r\n  \"exchangeMinFeeAmount\": \"as\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update configuration  | Empty exchangeMinFeeAmount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e623a32-5995-4db2-bd5b-63c524ee614f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "8d569fdf-fd96-438c-92c8-2f220feb3856",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userGroupId\": 20,\r\n  \"currency\": \"USDT\",\r\n   \"exchangeFee\": 1,\r\n  \"exchangeMinFeeAmount\": \"as\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{Admin_URL}}/user-group/fee"
							},
							"response": []
						},
						{
							"name": "Update user group name | Empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "597b5fe9-8f6f-4482-9286-0429ac4244dc",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be name must not be blank\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"must not be blank\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "4f0061ab-2d63-44ff-a9bc-b37b68d4f6ad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id?name=",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id"
									],
									"query": [
										{
											"key": "name",
											"value": ""
										}
									],
									"variable": [
										{
											"id": "fa23be96-f1e4-4fb1-a9f7-e2b0214faed4",
											"key": "id",
											"value": "{{UserGroupID}}",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user group name | Empty id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "597b5fe9-8f6f-4482-9286-0429ac4244dc",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "874b60bf-c80a-4dc5-a6a2-5d4061f56736",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id?name=test",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id"
									],
									"query": [
										{
											"key": "name",
											"value": "test"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user group name | Invalid id | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "597b5fe9-8f6f-4482-9286-0429ac4244dc",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "77bd1e62-c5d9-41ab-ba5c-a878be155d8b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id?name=test",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id"
									],
									"query": [
										{
											"key": "name",
											"value": "test"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "as",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user group name | Invalid id | Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "597b5fe9-8f6f-4482-9286-0429ac4244dc",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be UserGroup with id -1 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"UserGroup with id -1 not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "56e3514f-e709-48c7-810c-2050898da809",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id?name=test",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id"
									],
									"query": [
										{
											"key": "name",
											"value": "test"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "-1",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user group name | Invalid id | Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "597b5fe9-8f6f-4482-9286-0429ac4244dc",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be UserGroup with id 0 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"UserGroup with id 0 not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "ce6c713b-8a00-4e08-bc79-eb5aabe50788",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id?name=test",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id"
									],
									"query": [
										{
											"key": "name",
											"value": "test"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "0",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user group name | Invalid id | Out of the range",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "597b5fe9-8f6f-4482-9286-0429ac4244dc",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be UserGroup with id 12313123 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"UserGroup with id 12313123 not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "fd3b8c13-bc9d-4ec8-8c20-1f6747537c19",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id?name=test",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id"
									],
									"query": [
										{
											"key": "name",
											"value": "test"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "12313123",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user group | Empty id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "597b5fe9-8f6f-4482-9286-0429ac4244dc",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "88af1e55-a955-49a7-b169-22d4b7769c7d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user group | Invalid id | Symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "597b5fe9-8f6f-4482-9286-0429ac4244dc",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "967594f1-d8ea-4043-8a60-53b040b002e9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "asasd",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user group | Invalid id | Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "597b5fe9-8f6f-4482-9286-0429ac4244dc",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be UserGroup with id -1 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"UserGroup with id -1 not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "b772a18e-3639-4a69-84fd-a31e180835ea",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "-1",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user group | Invalid id | Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "597b5fe9-8f6f-4482-9286-0429ac4244dc",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be UserGroup with id 0 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"UserGroup with id 0 not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "534bc6ec-d6bf-4642-8858-bfa96dd00bff",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "0",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user group | Invalid id | Out of the range",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "597b5fe9-8f6f-4482-9286-0429ac4244dc",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be UserGroup with id 12313231 not found\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"UserGroup with id 12313231 not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "24a2979e-a079-487b-9b43-0c9453329815",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group/:id",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "12313231",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user group limits | Empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "597b5fe9-8f6f-4482-9286-0429ac4244dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "536aa572-79a1-4d08-9361-e276faf35c1b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group/limits?name=",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group",
										"limits"
									],
									"query": [
										{
											"key": "name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user group | Empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3644c109-3cbb-4952-802e-015429a24dfe",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Error message should be name must not be blank\", function () {\r",
											"    pm.expect(response.messageDescription).equal(\"must not be blank\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "8638bec2-b4f5-4c89-b288-4803f7487a8d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{Admin_URL}}/user-group?name=",
									"host": [
										"{{Admin_URL}}"
									],
									"path": [
										"user-group"
									],
									"query": [
										{
											"key": "name",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_id": "09028ac7-d4cb-407b-bfed-8d17d6299018",
					"_postman_isSubFolder": true
				}
			],
			"_postman_id": "a4df886f-97a4-42f5-94a0-a89689c3d254"
		},
		{
			"name": "Upload dictionary",
			"_postman_id": "7767d9d1-2be6-4624-a032-c3150a5975c7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "dictionary",
							"type": "file",
							"src": "/C:/Users/LukaKekenadze/Downloads/WalletPro V1.0.xlsx"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": "{{Admin_URL}}/dictionary/import"
			},
			"response": []
		},
		{
			"name": "Update user cache",
			"_postman_id": "521e42ef-bd14-4078-83e2-73cfe4d1ecc5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"url": "{{Admin_URL}}/user/cache"
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIyYWFJQ0Y2Ny0tbndKZVRrRFNKUXo3Uk1KNERzUXFiVHR1c0Z0SFNnaFZnIn0.eyJleHAiOjE4MzQ5MTM4MDEsImlhdCI6MTY4NDkxMzgwMSwiYXV0aF90aW1lIjoxNjg0OTExMDI1LCJqdGkiOiI5OGY5Y2MxMC0yYmRmLTQwZmUtYWQ0My1hMThhYTZmNGIwYjkiLCJpc3MiOiJodHRwczovL2F1dGgudGVzdGNyeXB0YWwuY29tL2F1dGgvcmVhbG1zL0dFWCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiJhOTA3NTU5Ny0yMzMxLTQ0MDktYTY2Zi01NTNhYzVhOWRjMjAiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJnZXgtc2VydmljZS1wdWJsaWMiLCJzZXNzaW9uX3N0YXRlIjoiOWU1MmEzYzAtMTUzZS00ZGNkLTk2YzYtODIwNmQwN2YwYzljIiwiYWNyIjoiMCIsImFsbG93ZWQtb3JpZ2lucyI6WyIqIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJ3YWxsZXQtcHJvLWN1c3RvbWVyIiwid2FsbGV0LXByby1tZmEtcGFzcy10aHJvdWdoIiwiZGVmYXVsdC1yb2xlcy1nZXgiLCJ3YWxsZXQtcHJvLXN5c2FkbWluIiwib2ZmbGluZV9hY2Nlc3MiLCJ3YWxsZXQtcHJvLWFkbWluIiwidW1hX2F1dGhvcml6YXRpb24iLCJ3YWxsZXQtcHJvLWZpbmFkbWluIiwiY3VzdG9tZXIiXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoib3BlbmlkIGVtYWlsIHByb2ZpbGUiLCJzaWQiOiI5ZTUyYTNjMC0xNTNlLTRkY2QtOTZjNi04MjA2ZDA3ZjBjOWMiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaXNMaW1pdGVkVG9rZW4iOnRydWUsIm5hbWUiOiJMdWthIEtla2VuYWR6ZSIsIlJvbGVzIjpbIndhbGxldC1wcm8tY3VzdG9tZXIiLCJ3YWxsZXQtcHJvLW1mYS1wYXNzLXRocm91Z2giLCJkZWZhdWx0LXJvbGVzLWdleCIsIndhbGxldC1wcm8tc3lzYWRtaW4iLCJvZmZsaW5lX2FjY2VzcyIsIndhbGxldC1wcm8tYWRtaW4iLCJ1bWFfYXV0aG9yaXphdGlvbiIsIndhbGxldC1wcm8tZmluYWRtaW4iLCJjdXN0b21lciJdLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJsa2VrZW5AY3J5cHR4LmNvbSIsImdpdmVuX25hbWUiOiJMdWthIiwiZmFtaWx5X25hbWUiOiJLZWtlbmFkemUiLCJvdHBUeXBlIjoiVE9UUCIsImVtYWlsIjoibGtla2VuQGNyeXB0eC5jb20ifQ.ICQ3GWM-88hzSTLNGC3XQ4ymsW8SBag6B1G7WoYlyf-m7Cl3lOh5qNrrDxEiwLrqvDniyJnHCo-6bsaqxWKeSWl73zdkXZFwwmKuHsgDSr2QZR5nGIAt4JDKWFJi5yp-SMIRgtQcdHNhZIsap8MZM1234cqMiYyz5shbib-NZJXzI0DmSapJqTKsrEOBsDHl9t3WLyKfKL55lNCoEHSN-m-U4PMhHiOKVRNg6xDPN5RZXbRMRkknwba8DL_SBEf0GklhbNQdXWF-AcC0fDMQWp-G9aLSrbpNd7xjVPgyYJ3weZjMFnZQsfyqS3lVvTz6VAUtQiBFiJIz2aWA2YeM1w"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "85132739-77a5-4f87-9812-4f5283c334f5",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "9b105da2-31ac-4801-b0f2-c45a09c223c3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "47c16cce-e8c1-44ed-8c57-d925f792d19a",
			"key": "Admin_URL",
			"value": "http://wallet-admin-back.testcryptal.com",
			"type": "string"
		},
		{
			"id": "f4ebfd16-db6b-4f74-bb8a-e65a9600406e",
			"key": "gasThreshold",
			"value": "",
			"type": "string"
		},
		{
			"id": "fd64fa39-fb27-4289-b92a-69b464ce4ba3",
			"key": "gasCap",
			"value": "",
			"type": "string"
		},
		{
			"id": "0fd759a1-38df-405c-95be-7caed7cc3422",
			"key": "maxGasPrice",
			"value": "",
			"type": "string"
		},
		{
			"id": "730fbaf1-a2a1-43c9-9cf8-5be2e3487e01",
			"key": "name",
			"value": "",
			"type": "string"
		},
		{
			"id": "419da805-ac20-405f-8eb2-63507c3e1a2f",
			"key": "SendNetwork",
			"value": "",
			"type": "string"
		},
		{
			"id": "f49f39c6-ae88-4ef2-bf67-069ab121e9e0",
			"key": "ReceiveNetwork",
			"value": "",
			"type": "string"
		},
		{
			"id": "7951c615-bde8-42f7-b8a2-a2096309c50b",
			"key": "ConfigID",
			"value": "",
			"type": "string"
		},
		{
			"id": "f07d1dfe-55df-4921-9bcc-304e542cd2f8",
			"key": "UserGroupID",
			"value": "",
			"type": "string"
		}
	]
}